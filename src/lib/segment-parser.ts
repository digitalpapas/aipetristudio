// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞
interface ParsedSegment {
  id: number;
  title: string;
  description: string;
}

// –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤
function cleanText(text: string): string {
  if (!text || typeof text !== 'string') return '';
  
  // –°–Ω–∞—á–∞–ª–∞ —É–±–∏—Ä–∞–µ–º JSON –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã
  let cleaned = text
    // –£–±–∏—Ä–∞–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã —Ç–∏–ø–∞ "}, {" –≤ –Ω–∞—á–∞–ª–µ
    .replace(/^[\s,}\{]+/, '')
    // –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏ –∏ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
    .replace(/^["'`]+|["'`]+$/g, '')
    // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å—ã
    .replace(/^(description|title)["']?\s*:\s*["']?/gi, '')
    .replace(/^(–ù–∞–∑–≤–∞–Ω–∏–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏|–ü–æ—è—Å–Ω–µ–Ω–∏–µ|Title|Description|Segment \d+):\s*/gi, '')
    // –£–±–∏—Ä–∞–µ–º markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    .replace(/^\*\*(.*?)\*\*$/g, '$1')
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    .replace(/\\"/g, '"')
    .replace(/\\n/g, ' ')
    .replace(/\\t/g, ' ')
    // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    .replace(/\s+/g, ' ')
    .trim();
    
  // –£–±–∏—Ä–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ JSON –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏
  cleaned = cleaned.replace(/[}\]]+$/, '').trim();
  
  // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –Ω–µ–ø–æ–ª–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å –∫–∞–≤—ã—á–∫–æ–π, —É–±–∏—Ä–∞–µ–º –µ—ë
  if (cleaned.endsWith('"') && !cleaned.startsWith('"')) {
    cleaned = cleaned.slice(0, -1).trim();
  }
  
  return cleaned;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –∏–∑ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–≥–æ JSON
function recoverFromCorruptedJson(data: any): ParsedSegment[] {
  console.log('üîß –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–≥–æ JSON:', data);
  
  const segments: ParsedSegment[] = [];
  
  if (!Array.isArray(data)) return segments;
  
  data.forEach((item, index) => {
    try {
      let title = '';
      let description = '';
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º title
      if (item.title && typeof item.title === 'string') {
        title = item.title;
      }
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º description - –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ –º–∞—Å—Å–∏–≤–æ–º
      if (item.description) {
        if (typeof item.description === 'string') {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ description JSON –º–∞—Å—Å–∏–≤
          if (item.description.startsWith('[') && item.description.endsWith(']')) {
            try {
              const parsedDesc = JSON.parse(item.description);
              if (Array.isArray(parsedDesc)) {
                description = parsedDesc.join(' ');
              } else {
                description = item.description;
              }
            } catch {
              description = item.description;
            }
          } else {
            description = item.description;
          }
        } else if (Array.isArray(item.description)) {
          description = item.description.join(' ');
        } else {
          description = String(item.description);
        }
      }
      
      // –ï—Å–ª–∏ title —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–ø–∏—Å–∞–Ω–∏–µ (—á—Ç–æ —á–∞—Å—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–º JSON)
      if (title && title.length > 50 && title.includes('.')) {
        const parts = title.split('.').map(p => p.trim());
        if (parts.length >= 2) {
          title = parts[0];
          description = parts.slice(1).join('. ') + (description ? ' ' + description : '');
        }
      }
      
      // –û—á–∏—â–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      title = cleanText(title);
      description = cleanText(description);
      
      if (title || description) {
        segments.push({
          id: index + 1,
          title: title || `–°–µ–≥–º–µ–Ω—Ç ${index + 1}`,
          description: description || ''
        });
      }
      
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —ç–ª–µ–º–µ–Ω—Ç–∞ ${index}:`, error);
      // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Å–µ–≥–º–µ–Ω—Ç
      segments.push({
        id: index + 1,
        title: `–°–µ–≥–º–µ–Ω—Ç ${index + 1}`,
        description: String(item)
      });
    }
  });
  
  console.log('‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤:', segments.length, segments);
  return segments;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è JSON –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π
function extractJsonFromText(text: string): any[] {
  const results: any[] = [];
  
  // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ JSON –≤ —Ç–µ–∫—Å—Ç–µ
  const jsonPatterns = [
    /\[[\s\S]*?\]/g,  // –ú–∞—Å—Å–∏–≤ JSON
    /"?\[[\s\S]*?\]"?/g,  // –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ JSON
  ];
  
  for (const pattern of jsonPatterns) {
    const matches = text.matchAll(pattern);
    for (const match of matches) {
      try {
        let jsonStr = match[0];
        // –£–±–∏—Ä–∞–µ–º –≤–Ω–µ—à–Ω–∏–µ –∫–∞–≤—ã—á–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        if (jsonStr.startsWith('"') && jsonStr.endsWith('"')) {
          jsonStr = jsonStr.slice(1, -1);
        }
        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
        jsonStr = jsonStr.replace(/\\"/g, '"');
        
        const parsed = JSON.parse(jsonStr);
        if (Array.isArray(parsed)) {
          results.push(...parsed);
        }
      } catch (e) {
        console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å JSON –∏–∑:', match[0]);
      }
    }
  }
  
  return results;
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞
export function parseSegments(input: string | any): ParsedSegment[] {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥:', typeof input);
  console.log('üìù –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', input);
  
  const segments: ParsedSegment[] = [];
  
  // 1. –ü–†–ò–û–†–ò–¢–ï–¢: –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∏—Å—Ç–æ–≥–æ JSON (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç –∞–≥–µ–Ω—Ç–∞)
  if (typeof input === 'string') {
    const trimmed = input.trim();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–º JSON –æ—Ç OpenAI
    if (trimmed.includes('description":') || trimmed.includes('title":')) {
      // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å JSON —Å—Ç—Ä—É–∫—Ç—É—Ä—É
      try {
        // –ò—â–µ–º –≤—Å–µ —Å–µ–≥–º–µ–Ω—Ç—ã –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
        const segmentMatches = trimmed.matchAll(/{[^}]*"title"[^}]*"description"[^}]*}/g);
        const foundSegments = [];
        
        for (const match of segmentMatches) {
          try {
            const segment = JSON.parse(match[0]);
            foundSegments.push(segment);
          } catch {
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ
          }
        }
        
        if (foundSegments.length > 0) {
          return foundSegments.map((item, index) => ({
            id: index + 1,
            title: cleanText(item.title || `–°–µ–≥–º–µ–Ω—Ç ${index + 1}`),
            description: cleanText(item.description || '')
          }));
        }
      } catch {
        console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å JSON —Å—Ç—Ä—É–∫—Ç—É—Ä—É');
      }
    }
    
    if (trimmed.startsWith('[') || trimmed.startsWith('{')) {
      try {
        const parsed = JSON.parse(trimmed);
        console.log('üìä –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏–ª–∏ JSON:', parsed);
        
        if (Array.isArray(parsed)) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π JSON (description –∫–∞–∫ –º–∞—Å—Å–∏–≤)
          const hasCorruptedStructure = parsed.some(item => 
            Array.isArray(item.description) || 
            (typeof item.description === 'string' && item.description.startsWith('['))
          );
          
          if (hasCorruptedStructure) {
            console.log('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π JSON, –ø—Ä–∏–º–µ–Ω—è–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ');
            const recovered = recoverFromCorruptedJson(parsed);
            if (recovered.length > 0) return recovered;
          }
          
          // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ JSON
          const result = parsed.map((item, index) => ({
            id: index + 1,
            title: cleanText(item.title || item.name || `–°–µ–≥–º–µ–Ω—Ç ${index + 1}`),
            description: cleanText(item.description || item.content || '')
          }));
          
          if (result.length > 0) {
            console.log('‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ JSON:', result);
            return result;
          }
        }
      } catch (e) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', e);
        console.log('üîÑ –ü—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã');
      }
    }
  }
  
  // 2. –ï—Å–ª–∏ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - —É–∂–µ –≥–æ—Ç–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤  
  if (Array.isArray(input)) {
    console.log('üìã –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ—Ç–æ–≤—ã–π –º–∞—Å—Å–∏–≤');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    const hasCorruption = input.some(item => 
      Array.isArray(item?.description) || 
      (typeof item?.description === 'string' && item.description.startsWith('['))
    );
    
    if (hasCorruption) {
      console.log('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤ –º–∞—Å—Å–∏–≤–µ');
      const recovered = recoverFromCorruptedJson(input);
      if (recovered.length > 0) return recovered;
    }
    
    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Å—Å–∏–≤–∞
    input.forEach((item, index) => {
      if (typeof item === 'object' && item !== null) {
        segments.push({
          id: index + 1,
          title: cleanText(item.title || item.name || item.segment_name || `–°–µ–≥–º–µ–Ω—Ç ${index + 1}`),
          description: cleanText(item.description || item.details || item.explanation || item.content || '')
        });
      }
    });
    
    if (segments.length > 0) {
      console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–ª–∏ –º–∞—Å—Å–∏–≤:', segments);
      return segments;
    }
  }
  
  // 3. –û–±—ä–µ–∫—Ç —Å –ø–æ–ª–µ–º segments –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  if (typeof input === 'object' && input !== null && !Array.isArray(input)) {
    console.log('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç:', input);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ–ª—è —Å –º–∞—Å—Å–∏–≤–∞–º–∏
    const possibleArrays = ['segments', 'results', 'data', 'items', 'audiences', 'generated_segments'];
    for (const key of possibleArrays) {
      if (Array.isArray(input[key])) {
        console.log(`üìã –ù–∞–π–¥–µ–Ω –º–∞—Å—Å–∏–≤ –≤ –ø–æ–ª–µ "${key}"`);
        return parseSegments(input[key]);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ JSON –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—è—Ö (–¥–ª—è –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
    for (const [key, value] of Object.entries(input)) {
      if (typeof value === 'string' && (value.startsWith('[') || value.includes('"title"'))) {
        console.log(`üîß –ù–∞–π–¥–µ–Ω –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π JSON –≤ –ø–æ–ª–µ "${key}"`);
        const extracted = extractJsonFromText(value);
        if (extracted.length > 0) {
          return parseSegments(extracted);
        }
      }
    }
    
    // –ï—Å–ª–∏ —ç—Ç–æ –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç-—Å–µ–≥–º–µ–Ω—Ç
    if (input.title || input.name || input.description) {
      return [{
        id: 1,
        title: cleanText(input.title || input.name || '–°–µ–≥–º–µ–Ω—Ç 1'),
        description: cleanText(input.description || input.content || '')
      }];
    }
  }
  
  // 3. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
  let textContent = '';
  if (typeof input === 'string') {
    textContent = input;
  } else {
    try {
      textContent = JSON.stringify(input);
    } catch {
      textContent = String(input);
    }
  }
  
  // 4. –ü—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å JSON –∏–∑ —Å—Ç—Ä–æ–∫–∏
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã JSON
  const jsonPatterns = [
    /\[[\s\S]*?\]/g,  // –ú–∞—Å—Å–∏–≤ JSON
    /\{[\s\S]*?\}/g,  // –û–±—ä–µ–∫—Ç JSON
    /```json\s*([\s\S]*?)\s*```/g,  // JSON –≤ markdown –±–ª–æ–∫–µ
    /```\s*([\s\S]*?)\s*```/g  // –õ—é–±–æ–π –∫–æ–¥ –±–ª–æ–∫
  ];
  
  for (const pattern of jsonPatterns) {
    const matches = textContent.matchAll(pattern);
    for (const match of matches) {
      try {
        const jsonStr = match[1] || match[0];
        const parsed = JSON.parse(jsonStr.replace(/```json|```/g, '').trim());
        
        if (Array.isArray(parsed) && parsed.length > 0) {
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞
          const segments = parsed.map((item, index) => {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –ø–æ–ª–µ–π title –∏ description
            let title = item.title || item.name || '';
            let description = item.description || item.content || '';
            
            // –ï—Å–ª–∏ –≤ title –µ—Å—Ç—å –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ (—Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–æ–π –∏–ª–∏ –¥–≤–æ–µ—Ç–æ—á–∏–µ–º)
            if (title.includes('. ') || title.includes(': ')) {
              const parts = title.split(/[.:]\s+/);
              if (parts.length >= 2) {
                title = cleanText(parts[0]);
                // –û—Å—Ç–∞–ª—å–Ω–æ–µ –¥–æ–±–∞–≤–ª—è–µ–º –∫ –æ–ø–∏—Å–∞–Ω–∏—é
                description = cleanText(parts.slice(1).join('. ') + (description ? ' ' + description : ''));
              } else {
                title = cleanText(title);
              }
            } else {
              title = cleanText(title);
            }
            
            // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Å–ª—É—á–∞—è –∫–æ–≥–¥–∞ –≤–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –æ–¥–Ω–æ–º –ø–æ–ª–µ
            if (!description && title.length > 100) {
              // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ
              const sentences = title.match(/[^.!?]+[.!?]+/g) || [title];
              if (sentences.length > 1) {
                title = cleanText(sentences[0]);
                description = cleanText(sentences.slice(1).join(' '));
              }
            }
            
            description = cleanText(description);
            
            return {
              id: index + 1,
              title: title || `–°–µ–≥–º–µ–Ω—Ç ${index + 1}`,
              description: description || ''
            };
          });
          
          if (segments.length > 0) return segments;
        } else if (typeof parsed === 'object' && parsed !== null) {
          const result = parseSegments(parsed);
          if (result.length > 0) return result;
        }
      } catch {
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥—Ä—É–≥–∏–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏
      }
    }
  }
  
  // 5. –ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
  const segmentPatterns = [
    // –ü–∞—Ç—Ç–µ—Ä–Ω: **–°–µ–≥–º–µ–Ω—Ç 1** –∏–ª–∏ –°–µ–≥–º–µ–Ω—Ç 1: –∏–ª–∏ #1 –∏–ª–∏ 1.
    /(?:^|\n)\s*(?:\*\*)?(?:–°–µ–≥–º–µ–Ω—Ç|Segment|–ê—É–¥–∏—Ç–æ—Ä–∏—è|Audience|#)\s*(\d+)(?:\*\*)?[:\.\-\s]*(.*?)(?=\n\s*(?:\*\*)?(?:–°–µ–≥–º–µ–Ω—Ç|Segment|–ê—É–¥–∏—Ç–æ—Ä–∏—è|Audience|#)\s*\d+|$)/gis,
    // –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤
    /(?:^|\n)\s*(\d+)[\.)\-]\s*(.*?)(?=\n\s*\d+[\.)\-]|$)/gis,
    // –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å –¥–≤–æ–µ—Ç–æ—á–∏–µ–º
    /(?:^|\n)\s*([–ê-–Ø–∞-—èA-Za-z][^:\n]{3,50}):\s*([^\n]+(?:\n(?![–ê-–Ø–∞-—èA-Za-z][^:\n]{3,50}:)[^\n]+)*)/gi
  ];
  
  for (const pattern of segmentPatterns) {
    const matches = textContent.matchAll(pattern);
    const foundSegments: ParsedSegment[] = [];
    
    for (const match of matches) {
      const fullMatch = match[0].trim();
      
      // –†–∞–∑–±–∏—Ä–∞–µ–º –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
      const lines = fullMatch.split('\n').map(l => l.trim()).filter(Boolean);
      
      if (lines.length > 0) {
        let title = '';
        let description = '';
        
        // –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –æ–±—ã—á–Ω–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫
        const firstLine = lines[0];
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        const titleMatch = firstLine.match(/(?:–°–µ–≥–º–µ–Ω—Ç\s*\d+[:\-\s]*)?(.+)/i);
        if (titleMatch) {
          title = cleanText(titleMatch[1]);
        }
        
        // –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ - –æ–ø–∏—Å–∞–Ω–∏–µ
        if (lines.length > 1) {
          description = lines.slice(1).map(line => cleanText(line)).join(' ');
        } else if (match[2]) {
          description = cleanText(match[2]);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤–ª–æ–∂–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã "–ù–∞–∑–≤–∞–Ω–∏–µ: ... –ü–æ—è—Å–Ω–µ–Ω–∏–µ: ..."
        const titleDescPattern = /(?:–ù–∞–∑–≤–∞–Ω–∏–µ[^:]*:|Title:)\s*([^\.]+)\.?\s*(?:–ü–æ—è—Å–Ω–µ–Ω–∏–µ[^:]*:|–û–ø–∏—Å–∞–Ω–∏–µ[^:]*:|Description:)\s*(.+)/i;
        const nestedMatch = (title + ' ' + description).match(titleDescPattern);
        
        if (nestedMatch) {
          title = cleanText(nestedMatch[1]);
          description = cleanText(nestedMatch[2]);
        }
        
        if (title || description) {
          foundSegments.push({
            id: foundSegments.length + 1,
            title: title || `–°–µ–≥–º–µ–Ω—Ç ${foundSegments.length + 1}`,
            description: description || ''
          });
        }
      }
    }
    
    if (foundSegments.length >= 2) {
      // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ö–æ—Ç—è –±—ã 2 —Å–µ–≥–º–µ–Ω—Ç–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö
      return foundSegments;
    }
  }
  
  // 6. –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - —Ä–∞–∑–±–∏—Ç—å –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
  const keywords = ['–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã', '–ú–æ–ª–æ–¥–æ–∂–µ–Ω—ã', '–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—ã –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π', 
                    '–ú–∞–ª—ã–π –±–∏–∑–Ω–µ—Å', '–°—Ç–∞—Ä—Ç–∞–ø—ã', '–ß–∞—Å—Ç–Ω—ã–µ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª–∏'];
  
  for (const keyword of keywords) {
    if (textContent.includes(keyword)) {
      const index = textContent.indexOf(keyword);
      const endIndex = textContent.indexOf('\n\n', index) || textContent.length;
      const segmentText = textContent.substring(index, endIndex);
      
      const descStart = segmentText.indexOf(':') + 1 || segmentText.indexOf('.') + 1;
      const description = cleanText(segmentText.substring(descStart));
      
      segments.push({
        id: segments.length + 1,
        title: cleanText(keyword),
        description: description
      });
    }
  }
  
  // 7. –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏, –Ω–æ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç - —Å–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω —Å–µ–≥–º–µ–Ω—Ç
  if (segments.length === 0 && textContent.trim()) {
    return [{
      id: 1,
      title: '–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞',
      description: cleanText(textContent.substring(0, 500))
    }];
  }
  
  return segments;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞
export function testParser() {
  const testCases = [
    // –í–∞—à –ø—Ä–∏–º–µ—Ä
    `[{"title":"–ù–∞–∑–≤–∞–Ω–∏–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏: –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã","description":"–ü–æ—è—Å–Ω–µ–Ω–∏–µ: –≠—Ç–æ—Ç —Å–µ–≥–º–µ–Ω—Ç –æ–±–ª–∞–¥–∞–µ—Ç –≤—ã—Å–æ–∫–æ–π –ø–ª–∞—Ç–µ–∂–µ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å—é"},{"title":"–ù–∞–∑–≤–∞–Ω–∏–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏: –ú–æ–ª–æ–¥–æ–∂–µ–Ω—ã","description":"–ü–æ—è—Å–Ω–µ–Ω–∏–µ: –ü–∞—Ä—ã, –ø–ª–∞–Ω–∏—Ä—É—é—â–∏–µ —Å–≤–∞–¥—å–±—É"}]`,
    // –ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
    `–°–µ–≥–º–µ–Ω—Ç 1: –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã
    –û–ø–∏—Å–∞–Ω–∏–µ: –ö–æ–º–ø–∞–Ω–∏–∏ —Å –≤—ã—Å–æ–∫–∏–º –±—é–¥–∂–µ—Ç–æ–º
    
    –°–µ–≥–º–µ–Ω—Ç 2: –°—Ç–∞—Ä—Ç–∞–ø—ã
    –û–ø–∏—Å–∞–Ω–∏–µ: –ú–æ–ª–æ–¥—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏`,
    // Markdown
    `**–°–µ–≥–º–µ–Ω—Ç 1**
    –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã - –æ—Å–Ω–æ–≤–Ω–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è
    
    **–°–µ–≥–º–µ–Ω—Ç 2** 
    –ú–∞–ª—ã–π –±–∏–∑–Ω–µ—Å - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è`
  ];
  
  testCases.forEach((test, i) => {
    console.log(`–¢–µ—Å—Ç ${i + 1}:`, parseSegments(test));
  });
}