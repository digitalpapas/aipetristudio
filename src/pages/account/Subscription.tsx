import { useEffect, useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from "@/components/ui/alert-dialog";
import { useAuth } from "@/contexts/AuthContext";
import { useSubscription } from "@/hooks/useSubscription";
import { supabase } from "@/integrations/supabase/client";
import { Calendar, CreditCard, User, AlertCircle, ArrowRight } from "lucide-react";
import { format } from "date-fns";
import { ru } from "date-fns/locale";
import { useNavigate } from "react-router-dom";
import { toast } from "sonner";

interface Payment {
  id: string;
  amount: number;
  plan: string;
  status: string;
  created_at: string;
  payment_type: string;
  prodamus_order_id: string;
}

const SubscriptionPage = () => {
  const { user } = useAuth();
  const { status, daysLeft, hasActiveSubscription, subscriptionId } = useSubscription();
  const [payments, setPayments] = useState<Payment[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [isCancelling, setIsCancelling] = useState(false);
  const [subscriptionExpiry, setSubscriptionExpiry] = useState<Date | null>(null);
  const navigate = useNavigate();

  const SUBSCRIPTION_URL = 'https://neurosetipraktika.payform.ru/subscription/2510594';

  useEffect(() => {
    document.title = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π | –ù–µ–π—Ä–æ—Å–µ—Ç–∏ –ü—Ä–∞–∫—Ç–∏–∫–∞";
    const metaDescription = document.querySelector('meta[name="description"]');
    if (metaDescription) {
      metaDescription.setAttribute('content', '–£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π, –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –∏—Å—Ç–æ—Ä–∏—é –ø–ª–∞—Ç–µ–∂–µ–π –∏ –æ–±–Ω–æ–≤–ª—è–π—Ç–µ —Ç–∞—Ä–∏—Ñ.');
    }
  }, []);

  useEffect(() => {
    if (user) {
      fetchSubscriptionData();
      fetchPaymentHistory();
    }
  }, [user]);

  const fetchSubscriptionData = async () => {
    if (!user) return;

    try {
      const { data: profile } = await supabase
        .from('profiles')
        .select('subscription_expires_at')
        .eq('user_id', user.id)
        .single();

      if (profile?.subscription_expires_at) {
        setSubscriptionExpiry(new Date(profile.subscription_expires_at));
      }
    } catch (error) {
      console.error('Error fetching subscription data:', error);
    }
  };

  const fetchPaymentHistory = async () => {
    if (!user) return;

    try {
      setIsLoading(true);
      const { data, error } = await supabase
        .from('payments')
        .select('*')
        .eq('user_id', user.id)
        .order('created_at', { ascending: false });

      if (error) {
        console.error('Error fetching payments:', error);
      } else {
        setPayments(data || []);
      }
    } catch (error) {
      console.error('Error fetching payment history:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const handleCancelSubscription = async () => {
    if (!subscriptionId || !user?.email) {
      console.error('Missing subscription data');
      toast.error('–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏');
      return;
    }

    try {
      setIsCancelling(true);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
      toast.loading('–û—Ç–º–µ–Ω—è–µ–º –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ...', { id: 'cancelling' });
      
      const { data, error } = await supabase.functions.invoke('cancel-subscription', {
        body: {
          subscriptionId: subscriptionId,
          userEmail: user?.email
        }
      });

      if (error) {
        console.error('Error cancelling subscription:', error);
        toast.dismiss('cancelling');
        toast.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–æ–¥–ø–∏—Å–∫–∏: ' + error.message + '. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.');
        return;
      }

      if (data?.success) {
        toast.dismiss('cancelling');
        
        // Success - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        toast.success('üéâ –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ!', {
          description: '–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –æ–Ω–∞ –Ω–µ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–ª–µ–Ω–∞.',
          duration: 8000,
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
        await fetchSubscriptionData();
        await fetchPaymentHistory();
      } else {
        console.error('Cancellation failed:', data);
        const errorMsg = data?.details || data?.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
        toast.dismiss('cancelling');
        toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', {
          description: errorMsg + '\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
          duration: 8000,
        });
      }
    } catch (error) {
      console.error('Error:', error);
      toast.dismiss('cancelling');
      toast.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–æ–¥–ø–∏—Å–∫–∏', {
        description: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É. –î–µ—Ç–∞–ª–∏: ' + error.message,
        duration: 8000,
      });
    } finally {
      setIsCancelling(false);
    }
  };

  const getStatusBadge = () => {
    switch (status) {
      case 'pro':
        return <Badge className="bg-green-100 text-green-800 hover:bg-green-100">Pro</Badge>;
      case 'enterprise':
        return <Badge className="bg-purple-100 text-purple-800 hover:bg-purple-100">Enterprise</Badge>;
      default:
        return <Badge variant="secondary">Demo</Badge>;
    }
  };

  const formatPrice = (amount: number) => {
    return new Intl.NumberFormat('ru-RU', {
      style: 'currency',
      currency: 'RUB',
      minimumFractionDigits: 0,
    }).format(amount);
  };

  return (
    <div className="container max-w-4xl mx-auto px-4 py-8">

      {/* –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å */}
      <Card className="mb-8">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <User className="w-5 h-5" />
            –¢–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <div className="flex items-center gap-2">
              <span className="text-muted-foreground">–°—Ç–∞—Ç—É—Å:</span>
              {getStatusBadge()}
            </div>

            {status === 'pro' && subscriptionExpiry && (
              <>
                <div className="flex items-center justify-between">
                  <span className="text-muted-foreground">–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</span>
                  <span className="font-medium">
                    {format(subscriptionExpiry, 'dd MMMM yyyy', { locale: ru })}
                  </span>
                </div>
                {daysLeft !== null && (
                  <div className="flex items-center justify-between">
                    <span className="text-muted-foreground">–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π:</span>
                    <span className={`font-medium ${daysLeft <= 3 ? 'text-destructive' : 'text-foreground'}`}>
                      {daysLeft > 0 ? `${daysLeft} –¥–Ω.` : '–ò—Å—Ç–µ–∫–ª–∞'}
                    </span>
                  </div>
                )}
              </>
            )}

            {subscriptionId && (
              <div className="flex items-center justify-between">
                <span className="text-muted-foreground">ID –ø–æ–¥–ø–∏—Å–∫–∏:</span>
                <span className="font-mono text-sm">{subscriptionId}</span>
              </div>
            )}
          </div>
        </CardContent>
      </Card>

      {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π */}
      <Card className="mb-8">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <CreditCard className="w-5 h-5" />
            –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
          </CardTitle>
        </CardHeader>
        <CardContent>
            {status === 'pro' ? (
              <div className="space-y-4">
                {subscriptionId ? (
                  <>
                    <div className="p-4 bg-green-50 border border-green-200 rounded-lg">
                      <p className="text-green-800 font-medium">
                        –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ: –≤–∫–ª—é—á–µ–Ω–æ (2,900‚ÇΩ/–º–µ—Å—è—Ü)
                      </p>
                      <p className="text-green-700 text-sm mt-1">
                        –ü–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–ª–µ–Ω–∞ –≤ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
                      </p>
                    </div>
                    
                    <AlertDialog>
                      <AlertDialogTrigger asChild>
                        <Button variant="outline" className="w-full sm:w-auto border-[hsl(var(--warning-red-border))] text-[hsl(var(--warning-red-text))] hover:bg-[hsl(var(--warning-red))]">
                          –û—Ç–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ
                        </Button>
                      </AlertDialogTrigger>
                      <AlertDialogContent>
                        <AlertDialogHeader>
                          <AlertDialogTitle className="flex items-center gap-2">
                            <AlertCircle className="w-5 h-5 text-amber-600" />
                            –û—Ç–º–µ–Ω–∞ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è
                          </AlertDialogTitle>
                          <AlertDialogDescription className="space-y-2">
                            <p>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ?</p>
                            <p className="text-sm text-muted-foreground">
                              –í–∞—à–∞ —Ç–µ–∫—É—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–æ–π –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞.
                              –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω–æ.
                            </p>
                          </AlertDialogDescription>
                        </AlertDialogHeader>
                        <AlertDialogFooter>
                          <AlertDialogCancel>–û—Ç–º–µ–Ω–∞</AlertDialogCancel>
                          <AlertDialogAction 
                            disabled={isCancelling}
                            onClick={handleCancelSubscription}
                            className="bg-[hsl(var(--warning-red-text))] hover:bg-[hsl(0_70%_45%)] text-white"
                          >
                            {isCancelling ? '–û—Ç–º–µ–Ω—è–µ–º...' : '–û—Ç–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ'}
                          </AlertDialogAction>
                        </AlertDialogFooter>
                      </AlertDialogContent>
                    </AlertDialog>
                  </>
                ) : (
                  <div className="p-4 bg-amber-50 border border-amber-200 rounded-lg">
                    <p className="text-amber-800 font-medium">
                      –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ: –æ—Ç–∫–ª—é—á–µ–Ω–æ
                    </p>
                    <p className="text-amber-700 text-sm mt-1">
                      –ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞. –î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –æ—Ñ–æ—Ä–º–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É.
                    </p>
                  </div>
                )}
              </div>
            ) : (
            <div className="space-y-4">
              <div className="p-4 bg-blue-50 border border-blue-200 rounded-lg">
                <p className="text-blue-800 font-medium mb-2">
                  –õ–∏–º–∏—Ç—ã Demo —Ç–∞—Ä–∏—Ñ–∞:
                </p>
                <ul className="text-blue-700 text-sm space-y-1">
                  <li>‚Ä¢ 1 –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ</li>
                  <li>‚Ä¢ 1 —Å–µ–≥–º–µ–Ω—Ç –Ω–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ</li>
                  <li>‚Ä¢ –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ (10 –∏–∑ 50 –ø—É–Ω–∫—Ç–æ–≤)</li>
                </ul>
              </div>
              
              <Button 
                onClick={() => window.open('https://payform.ru/fw9h36n/', '_blank')}
                className="w-full sm:w-auto"
              >
                <ArrowRight className="w-4 h-4 mr-2" />
                –û–±–Ω–æ–≤–∏—Ç—å –¥–æ Pro –∑–∞ 2,900‚ÇΩ
              </Button>
            </div>
          )}
        </CardContent>
      </Card>

      {/* –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Calendar className="w-5 h-5" />
            –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π
          </CardTitle>
        </CardHeader>
        <CardContent>
          {isLoading ? (
            <div className="text-center py-8 text-muted-foreground">
              –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π...
            </div>
          ) : payments.length > 0 ? (
            <div className="space-y-4">
              {payments.map((payment) => (
                <div
                  key={payment.id}
                  className="flex items-center justify-between p-4 border border-border rounded-lg"
                >
                  <div className="space-y-1">
                    <div className="font-medium">{payment.plan}</div>
                    <div className="text-sm text-muted-foreground">
                      {format(new Date(payment.created_at), 'dd.MM.yyyy HH:mm', { locale: ru })}
                    </div>
                    <div className="text-xs text-muted-foreground">
                      ID: {payment.prodamus_order_id}
                    </div>
                  </div>
                  <div className="text-right">
                    <div className="font-bold">{formatPrice(payment.amount)}</div>
                    <Badge 
                      variant={payment.status === 'completed' ? 'default' : 'secondary'}
                      className="text-xs"
                    >
                      {payment.status === 'completed' ? '–û–ø–ª–∞—á–µ–Ω–æ' : '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ'}
                    </Badge>
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <div className="text-center py-8 text-muted-foreground">
              –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π –ø—É—Å—Ç–∞
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
};

export default SubscriptionPage;