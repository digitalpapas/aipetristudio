import React, { useEffect, useState, useRef } from "react";
import { useNavigate } from "react-router-dom";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Folder, Lightbulb, Loader2, ArrowLeft, Bookmark, AlertCircle, Upload, FileText } from "lucide-react";
import { useAuth } from "@/contexts/AuthContext";
import { useCustomToast } from "@/hooks/use-custom-toast";
import { useLocation } from "react-router-dom";
import SegmentCards from "@/components/dashboard/SegmentCards";
import { createResearch, updateResearch, migrateLocalStorageToSupabase, deleteResearch, getResearchById } from "@/lib/supabase-utils";
import { convertFilesToTextViaEdgeFunction, ConversionProgress, saveConvertedFilesToSupabase, formatFileSize, validateFileSize, getTotalFileSize, isSupportedFormat, getFormatDescription } from "@/lib/file-conversion";
import { FileConversionProgress } from "@/components/dashboard/FileConversionProgress";
import { supabase } from "@/integrations/supabase/client";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/components/ui/alert-dialog";

export default function ResearchNewPage() {
  const navigate = useNavigate();
  const location = useLocation();
  const { user } = useAuth();
  const { toast } = useCustomToast();
  
  // –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  const createNotification = async (researchId: string, title: string, type: 'success' | 'error' | 'info') => {
    if (!user) return;
    
    try {
      const notificationData = {
        user_id: user.id,
        title: type === 'success' ? `–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ "${title}" –≥–æ—Ç–æ–≤–æ!` : `–û—à–∏–±–∫–∞ –≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏ "${title}"`,
        message: type === 'success' 
          ? '–ê–Ω–∞–ª–∏–∑ —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.'
          : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
        type,
        is_read: false,
        action_url: type === 'success' ? `/dashboard/research/${researchId}` : `/dashboard/research/new?id=${researchId}`,
        research_id: researchId
      };
      
      const { error } = await supabase
        .from('notifications')
        .insert([notificationData]);
        
      if (error) {
        console.error('Error creating notification:', error);
      } else {
        console.log('Notification created successfully for research:', researchId);
      }
    } catch (error) {
      console.error('Failed to create notification:', error);
    }
  };
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —Å –æ—à–∏–±–∫–æ–π
  const urlParams = new URLSearchParams(location.search);
  const recoveryId = urlParams.get('id');
  
  // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫—ç—à–∞ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const getCachedData = (id: string) => {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º sessionStorage –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    const sessionKey = `research_cache_${id}`;
    const sessionData = sessionStorage.getItem(sessionKey);
    if (sessionData) {
      try {
        return JSON.parse(sessionData);
      } catch (e) {
        console.error('Error parsing session cache:', e);
      }
    }
    
    // –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º localStorage –∫–∞–∫ fallback
    const cachedResearch = JSON.parse(localStorage.getItem('research') || '[]')
      .find((r: any) => r.id === id);
    return cachedResearch;
  };
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π –¥–∞–Ω–Ω—ã—Ö
  const cachedData = recoveryId ? getCachedData(recoveryId) : null;
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
  const getOriginalDescription = (cachedData: any) => {
    if (!cachedData?.description) return "";
    
    // –ï—Å–ª–∏ description —Å–æ–¥–µ—Ä–∂–∏—Ç JSON —Å originalDescription, –∏–∑–≤–ª–µ–∫–∞–µ–º –µ–≥–æ
    try {
      if (cachedData.description.startsWith('{')) {
        const parsed = JSON.parse(cachedData.description);
        return parsed.originalDescription || "";
      }
    } catch (e) {
      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    }
    
    return cachedData.description;
  };
  
  const [dataType, setDataType] = useState<"text" | "file">("text");
  const [title, setTitle] = useState(cachedData?.title || cachedData?.["Project name"] || "");
  const [idea, setIdea] = useState(getOriginalDescription(cachedData));
  const [files, setFiles] = useState<File[]>([]);
  const [loading, setLoading] = useState(false);
  const [originalAnalysisData, setOriginalAnalysisData] = useState<any>(null);
  const [error, setError] = useState(cachedData?.status === 'error');
  const [currentResearchId, setCurrentResearchId] = useState(recoveryId || "");
  const [loadingRecovery, setLoadingRecovery] = useState(Boolean(recoveryId));
  
  // File conversion states
  const [conversionProgress, setConversionProgress] = useState<ConversionProgress[]>([]);
  const [isConverting, setIsConverting] = useState(false);
  
  // AbortController –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  const abortControllerRef = useRef<AbortController | null>(null);

  useEffect(() => {
    document.title = "–ù–æ–≤–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ | AiPetri Studio";
    const desc = "–ó–∞–ø—É—Å—Ç–∏—Ç–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ: –æ–ø–∏—à–∏—Ç–µ –∏–¥–µ—é –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ.";
    let m = document.querySelector('meta[name="description"]');
    if (!m) { m = document.createElement("meta"); m.setAttribute("name","description"); document.head.appendChild(m); }
    m.setAttribute("content", desc);
    let c = document.querySelector('link[rel="canonical"]');
    if (!c) { c = document.createElement("link"); c.setAttribute("rel","canonical"); document.head.appendChild(c); }
    c.setAttribute("href", window.location.href);
    
    // –ù–ï –≤—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –∏–∑ localStorage —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    // –†–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ Supabase –∫–∞–∫ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º –ø—Ä–∞–≤–¥—ã
  }, [user?.id]);

  // Cleanup –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    return () => {
      // –û—Ç–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å –µ—Å–ª–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä—É–µ—Ç—Å—è
      if (abortControllerRef.current) {
        abortControllerRef.current.abort();
      }
      
      // –ï—Å–ª–∏ –º—ã –±—ã–ª–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ loading –∏ –∏–º–µ–ª–∏ recoveryId, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—à–∏–±–∫—É
      if (loading && recoveryId) {
        const existingResearchList = JSON.parse(localStorage.getItem('research') || '[]');
        const updatedList = existingResearchList.map((research: any) => {
          if (research.id === recoveryId && research.status === 'processing') {
            return {
              ...research,
              status: "error",
              error: "–ü—Ä–æ—Ü–µ—Å—Å –±—ã–ª –ø—Ä–µ—Ä–≤–∞–Ω"
            };
          }
          return research;
        });
        localStorage.setItem('research', JSON.stringify(updatedList));
      }
    };
  }, [loading, recoveryId]);

  // Realtime: watch research status and auto-navigate on completion
  useEffect(() => {
    const targetId = recoveryId || currentResearchId;
    if (!targetId) return;

    const channel = supabase
      .channel(`research-progress-${targetId}`)
      .on(
        'postgres_changes',
        { event: 'UPDATE', schema: 'public', table: 'researches' },
        (payload) => {
          const newData = (payload as any).new;
          if (newData?.["Project ID"] !== targetId) return;
          const newStatus = newData?.status;
          console.log('üì° Realtime: research status update', newStatus);
          if (newStatus === 'completed') {
            navigate(`/dashboard/research/${targetId}`);
          }
        }
      )
      .subscribe((status) => console.log('üì° Realtime (new page) subscription status:', status));

    return () => {
      supabase.removeChannel(channel);
    };
  }, [recoveryId, currentResearchId, navigate]);

  // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
  useEffect(() => {
    const handleResearchRecovery = async () => {
      if (recoveryId) {
        try {
          // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≥–æ—Ç–æ–≤—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã –≤ –ë–î
          const checkExistingSegments = async () => {
            const { data: segments } = await supabase
              .from('segments')
              .select('*')
              .eq('Project ID', recoveryId);
            
            if (segments && segments.length > 0) {
              // –ï—Å–ª–∏ —Å–µ–≥–º–µ–Ω—Ç—ã –µ—Å—Ç—å, —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –≤–∫–ª—é—á–∞—è problems –∏ message
              const formattedSegments = segments.map(s => ({
                id: s['–°–µ–≥–º–µ–Ω—Ç ID'],
                title: s['–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç–∞'],
                description: s.description,
                problems: (s as any).problems,    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—è problems
                message: (s as any).message       // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—è message
              }));
              
              // –ó–∞–≥—Ä—É–∂–∞–µ–º –ü–û–õ–ù–´–ï –¥–∞–Ω–Ω—ã–µ —Ç–æ–ø-3 —Å–µ–≥–º–µ–Ω—Ç–æ–≤
              const { data: topSegmentsData } = await supabase
                .from('top_segments')
                .select('*') // –ó–∞–≥—Ä—É–∂–∞–µ–º –í–°–ï –ø–æ–ª—è –≤–∫–ª—é—á–∞—è reasoning
                .eq('project_id', recoveryId)
                .order('rank');
              
              // –õ–æ–≥ —É–¥–∞–ª–µ–Ω –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ø–∞–º–∞
              
              // –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
              setLoadingRecovery(false);
              setLoading(false);
              setError(false);
              navigate(`/dashboard/research/${recoveryId}`);
              return true;
            }
            return false;
          };

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
          const getCachedSegments = () => {
            const sessionKey = `research_segments_${recoveryId}`;
            const cachedSegments = sessionStorage.getItem(sessionKey);
            
            if (cachedSegments) {
              try {
                const segments = JSON.parse(cachedSegments);
                if (segments && segments.length > 0) {
                  // –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                  setLoadingRecovery(false);
                  setLoading(false);
                  setError(false);
                  navigate(`/dashboard/research/${recoveryId}`);
                  return;
                  setLoading(false);
                  setError(false);
                  return true;
                }
              } catch (e) {
                console.error('Error parsing cached segments:', e);
              }
            }
            return false;
          };

          // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à, –∑–∞—Ç–µ–º –ë–î
          if (getCachedSegments() || await checkExistingSegments()) {
            return;
          }
          
          // –¢–ï–ü–ï–†–¨ –∑–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Supabase
          const { data: research, error } = await getResearchById(recoveryId);
          
          if (!error && research) {
            console.log('Research found in Supabase:', research);
            
            // –ö—ç—à–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ sessionStorage –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –≤ –±—É–¥—É—â–µ–º
            const cacheData = {
              title: research["Project name"] || "",
              "Project name": research["Project name"] || "",
              description: research.description || "",
              status: research.status
            };
            sessionStorage.setItem(`research_cache_${recoveryId}`, JSON.stringify(cacheData));
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –æ—Ç —Ç–µ–∫—É—â–∏—Ö (–∏–∑–±–µ–≥–∞–µ–º –ª–∏—à–Ω–∏—Ö —Ä–µ–Ω–¥–µ—Ä–æ–≤)
            const newTitle = research["Project name"] || "";
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ JSON –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            let newIdea = research.description || "";
            try {
              if (research.description && research.description.startsWith('{')) {
                const parsed = JSON.parse(research.description);
                newIdea = parsed.originalDescription || "";
              }
            } catch (e) {
              // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
            }
            
            if (newTitle !== title || newIdea !== idea) {
              setTitle(newTitle);
              setIdea(newIdea);
            }
            
            setCurrentResearchId(recoveryId);
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –∏–∑ Supabase
            if (research.status === 'error') {
              setError(true);
              setLoadingRecovery(false);
              console.log('Research has error status, showing error state');
            } else if (research.status === 'generating' || research.status === 'processing') {
              // –û—Å—Ç–∞–µ–º—Å—è –≤ loadingRecovery –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–∞—é—â–∏—Ö—Å—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
              setError(false);
              console.log('Research is processing, staying in recovery state');
            } else if (research.status === 'awaiting_selection' && research.generated_segments) {
              // –°—Ä–∞–∑—É —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ë–ï–ó loadingRecovery
              let topSegments = [];
              
              // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —Ç–æ–ø-3 –∏–∑ description
              try {
                if (research.description && research.description.startsWith('{')) {
                  const descriptionData = JSON.parse(research.description);
                  topSegments = descriptionData.topSegments || [];
                }
              } catch (e) {
                console.warn('Could not parse description for top segments:', e);
              }
              
              // –ö—ç—à–∏—Ä—É–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
              sessionStorage.setItem(
                `research_segments_${recoveryId}`,
                JSON.stringify(research.generated_segments)
              );
              
              // –í–ê–ñ–ù–û: –°—Ä–∞–∑—É –≤—ã–∫–ª—é—á–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
              setLoadingRecovery(false);
              setLoading(false);
              setError(false);
              navigate(`/dashboard/research/${recoveryId}`);
              return;
            } else if (research.status === 'completed') {
              setError(false);
              console.log('Research is completed, redirecting to results');
              // –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
              navigate(`/dashboard/research/${recoveryId}`);
              return;
            } else {
              // –î–ª—è –¥—Ä—É–≥–∏—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'pending') –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
              setLoadingRecovery(false);
              setError(false);
            }
          } else {
            // –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ Supabase, –ø—Ä–æ–≤–µ—Ä—è–µ–º localStorage –∫–∞–∫ fallback
            console.log('Research not found in Supabase, checking localStorage');
            const cachedResearch = JSON.parse(localStorage.getItem('research') || '[]')
              .find((r: any) => r.id === recoveryId);
            
            if (cachedResearch) {
              console.log('Research found in localStorage:', cachedResearch);
              
              // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è
              const newTitle = cachedResearch.title || "";
              
              // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ JSON –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
              let newIdea = cachedResearch.description || "";
              try {
                if (cachedResearch.description && cachedResearch.description.startsWith('{')) {
                  const parsed = JSON.parse(cachedResearch.description);
                  newIdea = parsed.originalDescription || "";
                }
              } catch (e) {
                // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
              }
              
              if (newTitle !== title || newIdea !== idea) {
                setTitle(newTitle);
                setIdea(newIdea);
              }
              
              setCurrentResearchId(recoveryId);
              
              if (cachedResearch.status === 'error') {
                setError(true);
                setLoadingRecovery(false);
              } else if (cachedResearch.status === 'generating' || cachedResearch.status === 'processing') {
                // –û—Å—Ç–∞–µ–º—Å—è –≤ loadingRecovery –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–∞—é—â–∏—Ö—Å—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
                setError(false);
              } else {
                // –î–ª—è –¥—Ä—É–≥–∏—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
                setLoadingRecovery(false);
                setError(false);
              }
            } else {
              // –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏–≥–¥–µ
              console.error('Research not found anywhere:', recoveryId);
              toast({
                type: "error",
                title: "–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                description: "–î–∞–Ω–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
              });
              navigate('/dashboard');
              return;
            }
          }
        } catch (error) {
          console.error('Error loading research:', error);
          toast({
            type: "error",
            title: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏",
            description: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"
          });
          navigate('/dashboard');
        }
      }
    };

    handleResearchRecovery();
  }, [recoveryId, navigate, toast, user?.id]);

  const getFileTypeInfo = (file: File) => {
    const extension = file.name.split('.').pop()?.toLowerCase() || '';
    
    // –î–æ–∫—É–º–µ–Ω—Ç—ã
    if (['txt', 'rtf', 'odt', 'md', 'markdown'].includes(extension)) {
      return { icon: 'üìÑ', type: '–¢–µ–∫—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç' };
    }
    if (['pdf'].includes(extension)) {
      return { icon: 'üìÑ', type: 'PDF –¥–æ–∫—É–º–µ–Ω—Ç' };
    }
    if (['doc', 'docx'].includes(extension)) {
      return { icon: 'üìÑ', type: 'Word –¥–æ–∫—É–º–µ–Ω—Ç' };
    }
    
    // –¢–∞–±–ª–∏—Ü—ã
    if (['xls', 'xlsx'].includes(extension)) {
      return { icon: 'üìä', type: 'Excel —Ç–∞–±–ª–∏—Ü–∞' };
    }
    if (['csv', 'ods'].includes(extension)) {
      return { icon: 'üìä', type: '–¢–∞–±–ª–∏—Ü–∞' };
    }
    
    // –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏
    if (['ppt', 'pptx'].includes(extension)) {
      return { icon: 'üìä', type: '–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è' };
    }
    
    // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if (['jpg', 'jpeg', 'png', 'gif', 'bmp', 'tiff'].includes(extension)) {
      return { icon: 'üì∑', type: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ' };
    }
    
    // –í–µ–± –∏ –∫–Ω–∏–≥–∏
    if (['html', 'htm'].includes(extension)) {
      return { icon: 'üåê', type: 'HTML –¥–æ–∫—É–º–µ–Ω—Ç' };
    }
    if (['epub', 'mobi'].includes(extension)) {
      return { icon: 'üìö', type: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –∫–Ω–∏–≥–∞' };
    }
    
    return { icon: 'üìÑ', type: '–î–æ–∫—É–º–µ–Ω—Ç' };
  };

  const validateFiles = (files: File[]) => {
    const allowedExtensions = [
      // –î–æ–∫—É–º–µ–Ω—Ç—ã
      'txt', 'pdf', 'doc', 'docx', 'rtf', 'odt',
      // –¢–∞–±–ª–∏—Ü—ã  
      'xls', 'xlsx', 'csv', 'ods',
      // –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏
      'ppt', 'pptx',
      // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–¥–ª—è OCR)
      'jpg', 'jpeg', 'png', 'gif', 'bmp', 'tiff',
      // –í–µ–± –∏ –∫–Ω–∏–≥–∏
      'html', 'htm', 'epub', 'mobi',
      // –†–∞–∑–º–µ—Ç–∫–∞
      'md', 'markdown'
    ];
    
    const maxFileSize = 20 * 1024 * 1024; // 20 –ú–ë
    const maxTotalSize = 50 * 1024 * 1024; // 50 –ú–ë
    
    let totalSize = 0;
    
    for (const file of files) {
      const extension = file.name.split('.').pop()?.toLowerCase() || '';
      
      if (!allowedExtensions.includes(extension)) {
        toast({
          type: "error",
          title: "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç",
          description: `–§–∞–π–ª ${file.name} –∏–º–µ–µ—Ç –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: PDF, Word, Excel, TXT, RTF, HTML, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º`
        });
        return false;
      }
      
      if (file.size > maxFileSize) {
        toast({
          type: "error",
          title: "–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π",
          description: `–§–∞–π–ª ${file.name} –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç 20 –ú–ë`
        });
        return false;
      }
      
      totalSize += file.size;
    }
    
    if (totalSize > maxTotalSize) {
      toast({
        type: "error",
        title: "–ü—Ä–µ–≤—ã—à–µ–Ω –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä",
        description: "–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 –ú–ë"
      });
      return false;
    }
    
    return true;
  };

  // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ CloudConvert
  const validateFilesForConversion = (files: File[]) => {
    // Check file formats
    const unsupportedFiles = files.filter(file => !isSupportedFormat(file));
    if (unsupportedFiles.length > 0) {
      const fileNames = unsupportedFiles.map(f => f.name).join(', ');
      toast({
        type: "error",
        title: "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã",
        description: `–§–∞–π–ª—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: ${fileNames}`
      });
      return false;
    }
    
    // Check file sizes individually
    for (const file of files) {
      const validation = validateFileSize(file);
      if (!validation.valid) {
        toast({
          type: "error",
          title: "–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π",
          description: validation.error
        });
        return false;
      }
    }
    
    // Check total size
    const totalSize = getTotalFileSize(files);
    const maxTotalSize = 500 * 1024 * 1024; // 500MB total
    if (totalSize > maxTotalSize) {
      toast({
        type: "error",
        title: "–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π",
        description: "–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 500MB"
      });
      return false;
    }
    
    return true;
  };

  // –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞ - –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è webhook

  const start = async () => {
    // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
    if (loading) {
      console.log("Research creation already in progress, ignoring duplicate call");
      return;
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –≤ –Ω–∞—á–∞–ª–µ —Ñ—É–Ω–∫—Ü–∏–∏
    const researchId = Date.now().toString();
    console.log("Starting research creation with ID:", researchId);
    
    if (!user) {
      toast({
        type: "error",
        title: "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏",
        description: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"
      });
      return;
    }

    if (!title.trim()) {
      toast({
        type: "warning",
        title: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ",
        description: "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"
      });
      return;
    }

    if (dataType === "text" && idea.length < 100) {
      toast({
        type: "warning",
        title: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–µ–∫—Å—Ç–∞",
        description: "–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤"
      });
      return;
    }

    if (dataType === "file" && files.length === 0) {
      toast({
        type: "warning",
        title: "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã",
        description: "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ñ–∞–π–ª"
      });
      return;
    }

    if (dataType === "file" && !validateFilesForConversion(files)) {
      return;
    }

    setLoading(true);

    try {
      const description = dataType === "text" ? idea : `${files.length} —Ñ–∞–π–ª(–æ–≤)`;
      
      // –°–æ–∑–¥–∞–µ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –≤ Supabase
      const { data: research, error: createError } = await createResearch(
        researchId,
        user.id,
        title,
        description
      );

      if (createError) {
        console.error('Error creating research:', createError);
        toast({
          type: "error",
          title: "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è",
          description: "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"
        });
        return;
      }

      // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —Å—Ä–∞–∑—É —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "generating"
      const newResearch = {
        id: researchId,
        title: title,
        createdAt: new Date().toISOString(),
        status: "generating",
        segmentsCount: 0,
        description: description,
        type: dataType,
        generatedSegments: null
      };

      // –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage - —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å Supabase
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
      setCurrentResearchId(researchId);
      
      let requestBody: any = {
        user_id: user.id,
        research_id: researchId,
        analysis_type: "initial_research",
        status: 'pending',
        userEmail: user.email,
        projectName: title,
        timestamp: new Date().toISOString()
      };

      let response;

      if (dataType === "text") {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–µ–∂–∏–º–∞ "–£ –º–µ–Ω—è –µ—Å—Ç—å –∏–¥–µ—è"
        console.log("Starting direct analysis...");
        
        const { data, error } = await supabase.functions.invoke('direct-segment-analysis', {
          body: {
            projectName: title.trim(),
            description: idea.trim(),
            userId: user.id,
            projectId: researchId
          }
        });

        if (error) {
          console.error("Supabase function error:", error);
          throw error;
        }

        if (data.success) {
          console.log("Analysis response data:", data);
          
          // –î–∞–Ω–Ω—ã–µ —É–∂–µ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω—ã –≤ Edge Function, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–ø—Ä—è–º—É—é
          const processedSegments = data.segments || [];
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –≤–∞–ª–∏–¥–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã
          if (!processedSegments || !Array.isArray(processedSegments) || processedSegments.length === 0) {
            console.warn("No segments received from analysis:", data);
            throw new Error("–ê–Ω–∞–ª–∏–∑ –Ω–µ —Å–º–æ–≥ –≤—ã–¥–µ–ª–∏—Ç—å —Å–µ–≥–º–µ–Ω—Ç—ã –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏.");
          }
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
          const originalData = {
            projectName: title.trim(),
            description: idea.trim(),
            userId: user.id,
            projectId: researchId
          };
          setOriginalAnalysisData(originalData);
          
          // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
          await createNotification(researchId, title, 'success');
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –¥–æ 'completed' –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
          await supabase
            .from('researches')
            .update({ 
              status: 'completed',
              "segmentsCount": processedSegments.length
            })
            .eq('Project ID', researchId);
          
          setLoading(false);
          
          // –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–º–µ—Å—Ç–æ –ø–æ–∫–∞–∑–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
          navigate(`/dashboard/research/${researchId}`);
          return;
        } else {
          throw new Error(data.error || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞");
        }
      } else if (dataType === "file") {
        // Process file conversion first
        console.log("Starting file conversion...");
        setIsConverting(true);
        
        // Call edge function for conversion with proper researchId
        const conversionResult = await convertFilesToTextViaEdgeFunction(files, researchId, setConversionProgress);
        
        if (!conversionResult.success) {
          throw new Error(conversionResult.error || "–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤");
        }
        
        if (!conversionResult.data || conversionResult.data.length === 0) {
          throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–∏–Ω —Ñ–∞–π–ª");
        }
        
        // Edge function already saves files to database, so we just combine text content
        const combinedText = conversionResult.data
          .map(file => `–§–∞–π–ª: ${file.filename}\n\n${file.content}`)
          .join('\n\n---\n\n');
        
        console.log('Combined text length:', combinedText.length);
        console.log('Number of files processed:', conversionResult.data.length);
        console.log('Files processed:', conversionResult.data.map(f => f.filename).join(', '));
        
        setIsConverting(false);
        
        // –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É —á—Ç–æ –∏ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ - —á–µ—Ä–µ–∑ direct-segment-analysis
        console.log("Starting analysis with converted text...");
        
        const { data, error } = await supabase.functions.invoke('direct-segment-analysis', {
          body: {
            projectName: title.trim(),
            description: combinedText,
            userId: user.id,
            projectId: researchId
          }
        });

        if (error) {
          console.error("Supabase function error:", error);
          throw error;
        }

        if (data.success) {
          console.log("Analysis response data:", data);
          console.log('Analysis returned segments:', data.segments?.length);
          console.log('Top segments:', data.topSegments);
          console.log('RAW DATA from FILE Edge Function:', data);
          
          // –î–∞–Ω–Ω—ã–µ —É–∂–µ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω—ã –≤ Edge Function, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–ø—Ä—è–º—É—é
          const processedSegments = data.segments || [];
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –≤–∞–ª–∏–¥–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã
          if (!processedSegments || !Array.isArray(processedSegments) || processedSegments.length === 0) {
            console.warn("No segments received from analysis:", data);
            throw new Error("–ê–Ω–∞–ª–∏–∑ –Ω–µ —Å–º–æ–≥ –≤—ã–¥–µ–ª–∏—Ç—å —Å–µ–≥–º–µ–Ω—Ç—ã –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏.");
          }
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
          const originalData = {
            projectName: title.trim(),
            description: combinedText,
            userId: user.id,
            projectId: researchId
          };
          setOriginalAnalysisData(originalData);
          
          // –ö—ç—à–∏—Ä—É–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏
          sessionStorage.setItem(
            `research_segments_${researchId}`,
            JSON.stringify(processedSegments)
          );
          
          // –ö—ç—à–∏—Ä—É–µ–º —Ç–æ–ø-—Å–µ–≥–º–µ–Ω—Ç—ã –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
          if (data.topSegmentsData && data.topSegmentsData.length > 0) {
            sessionStorage.setItem(
              `research_top_segments_${researchId}`,
              JSON.stringify(data.topSegmentsData)
            );
          }
          
          // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
          await createNotification(researchId, title, 'success');
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –¥–æ 'completed' –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
          await supabase
            .from('researches')
            .update({ 
              status: 'completed',
              "segmentsCount": processedSegments.length
            })
            .eq('Project ID', researchId);
          
          setLoading(false);
          
          // –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–º–µ—Å—Ç–æ –ø–æ–∫–∞–∑–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
          navigate(`/dashboard/research/${researchId}`);
          return;
        } else {
          throw new Error(data.error || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞");
        }
      }
    } catch (error) {
      console.error("Error in research creation:", error);
      let errorMessage = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞";
      
      if (error instanceof Error) {
        errorMessage = error.message;
      } else if (typeof error === 'string') {
        errorMessage = error;
      }
      
      toast({
        type: "error",
        title: "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è",
        description: errorMessage
      });
      
      // Update research with error status
      if (currentResearchId) {
        setError(true);
        
        // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        await createNotification(currentResearchId, title, 'error');
        
        updateResearch(currentResearchId, {
          status: "error",
          description: `${title} - Error: ${errorMessage}`
        });
      }
    } finally {
      setLoading(false);
      setIsConverting(false);
    }
  };


  const handleRetryAnalysis = async () => {
    if (!currentResearchId || !user) return;
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π AbortController –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    abortControllerRef.current = new AbortController();
    
    setError(false);
    setLoading(true);
    
    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ Supabase
      await updateResearch(currentResearchId, { 
        description: dataType === "text" ? idea : `${files.length} —Ñ–∞–π–ª(–æ–≤)` 
      });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ localStorage
      const existingResearchList = JSON.parse(localStorage.getItem('research') || '[]');
      const updatedResearchList = existingResearchList.map((research: any) => {
        if (research.id === currentResearchId) {
          return {
            ...research,
            status: "processing"
          };
        }
        return research;
      });
      localStorage.setItem('research', JSON.stringify(updatedResearchList));
      
      let requestBody: any = {
        userId: user.id,
        userEmail: user.email,
        projectName: title,
        timestamp: new Date().toISOString(),
        researchId: currentResearchId
      };

      let response;

      if (dataType === "text") {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–µ–∂–∏–º–∞ "–£ –º–µ–Ω—è –µ—Å—Ç—å –∏–¥–µ—è"
        console.log("Starting retry with direct analysis...");
        
        const { data, error } = await supabase.functions.invoke('direct-segment-analysis', {
          body: {
            projectName: title.trim(),
            description: idea.trim(),
            userId: user.id,
            projectId: currentResearchId
          }
        });

        if (error) {
          console.error("Supabase function error:", error);
          throw error;
        }

        if (!data.success) {
          throw new Error(data.error || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞");
        }

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ
        response = {
          ok: true,
          async json() { return data; }
        };
      } else {
        // –î–ª—è —Ñ–∞–π–ª–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ –ø–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É
        // TODO: —Å–æ–∑–¥–∞—Ç—å Edge Function –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤
        throw new Error("–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º.");
      }

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const result = await response.json();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –≤ Supabase
      const description = dataType === "text" ? idea : `${files.length} —Ñ–∞–π–ª(–æ–≤)`;
      await updateResearch(currentResearchId, { 
        description: `${description} - Completed with segments` 
      });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º localStorage –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
      const finalResearchList = JSON.parse(localStorage.getItem('research') || '[]');
      const finalUpdatedList = finalResearchList.map((research: any) => {
        if (research.id === currentResearchId) {
          return {
            ...research,
            status: "completed",
            generatedSegments: result
          };
        }
        return research;
      });
      localStorage.setItem('research', JSON.stringify(finalUpdatedList));

      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
      navigate(`/dashboard/research/${currentResearchId}`);
      
      toast({
        type: "success",
        title: "–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω",
        description: "–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —É—Å–ø–µ—à–Ω–∞"
      });
    } catch (error) {
      console.error("Retry error:", error);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –∑–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω
      if (error instanceof Error && error.name === 'AbortError') {
        console.log("Request was aborted");
        // –ü—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø—Ä–æ—Å–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∏ –≤ localStorage
        const existingResearchList = JSON.parse(localStorage.getItem('research') || '[]');
        const updatedList = existingResearchList.map((research: any) => {
          if (research.id === currentResearchId) {
            return {
              ...research,
              status: "error",
              error: "–ü—Ä–æ—Ü–µ—Å—Å –±—ã–ª –ø—Ä–µ—Ä–≤–∞–Ω"
            };
          }
          return research;
        });
        localStorage.setItem('research', JSON.stringify(updatedList));
        setError(true);
        return;
      }
      
      setError(true);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º localStorage –ø—Ä–∏ –æ—à–∏–±–∫–µ
      const existingResearchList = JSON.parse(localStorage.getItem('research') || '[]');
      const updatedList = existingResearchList.map((research: any) => {
        if (research.id === currentResearchId) {
          return {
            ...research,
            status: "error",
            error: "–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å"
          };
        }
        return research;
      });
      localStorage.setItem('research', JSON.stringify(updatedList));
      
      toast({
        type: "error",
        title: "–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å",
        description: "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ"
      });
    } finally {
      setLoading(false);
      abortControllerRef.current = null;
    }
  };

  const handleDeleteResearch = async () => {
    if (!currentResearchId || !user) return;
    
    try {
      // –£–¥–∞–ª—è–µ–º –∏–∑ Supabase
      await deleteResearch(currentResearchId);
      
      // –£–¥–∞–ª—è–µ–º –∏–∑ localStorage
      const existingResearchList = JSON.parse(localStorage.getItem('research') || '[]');
      const updatedList = existingResearchList.filter((research: any) => research.id !== currentResearchId);
      localStorage.setItem('research', JSON.stringify(updatedList));
      
      toast({
        type: "delete",
        title: "–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ",
        description: "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã"
      });
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –¥–∞—à–±–æ—Ä–¥
      navigate('/dashboard');
    } catch (error) {
      console.error("Delete error:", error);
      toast({
        type: "error",
        title: "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ"
      });
    }
  };

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —á–µ—Ç–∫–æ–≥–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –æ—à–∏–±–∫–∞ > –∑–∞–≥—Ä—É–∑–∫–∞)
  const currentState = 
    error ? 'error' : 
    loadingRecovery ? 'loading-recovery' : 
    loading ? 'loading' : 
    'form';

  return (
    <main className="space-y-5">
      <header className="sr-only"><h1>–ù–æ–≤–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ</h1></header>

      {/* –ï–¥–∏–Ω–∞—è —Ñ–æ—Ä–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è */}
      {currentState === "form" && (
        <section className="space-y-4">
          <div className="flex items-center gap-3 mb-4">
            <Button 
              variant="ghost" 
              size="sm" 
              onClick={() => navigate('/dashboard')}
              className="flex items-center gap-2"
            >
              <ArrowLeft className="h-4 w-4" />
              –ù–∞–∑–∞–¥ –∫ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è–º
            </Button>
          </div>
          
          <div className="bg-card rounded-2xl border p-6 space-y-6">
            <h2 className="text-xl font-semibold">–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h2>
            
            {/* –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ */}
            <div className="space-y-2">
              <label className="text-sm font-medium">–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ <span className="text-destructive">*</span></label>
              <Input 
                value={title} 
                onChange={async (e) => {
                  const newTitle = e.target.value;
                  setTitle(newTitle);
                  
                  // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Supabase –µ—Å–ª–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —É–∂–µ —Å–æ–∑–¥–∞–Ω–æ
                  if (currentResearchId && user) {
                    try {
                      await updateResearch(currentResearchId, { 
                        "Project name": newTitle 
                      });
                      
                      // –û–±–Ω–æ–≤–ª—è–µ–º localStorage
                      const existingResearch = JSON.parse(localStorage.getItem('research') || '[]');
                      const updatedResearch = existingResearch.map((research: any) => {
                        if (research.id === currentResearchId) {
                          return { ...research, title: newTitle };
                        }
                        return research;
                      });
                      localStorage.setItem('research', JSON.stringify(updatedResearch));
                    } catch (error) {
                      console.error('Error updating research title:', error);
                    }
                  }
                }}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞..." 
                className="w-full" 
              />
            </div>

            {/* –†–∞–¥–∏–æ–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö */}
            <div className="space-y-3">
              <label className="text-sm font-medium">–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö</label>
              <div className="space-y-2">
                <label className="flex items-center space-x-3 cursor-pointer">
                  <input
                    type="radio"
                    name="dataType"
                    value="text"
                    checked={dataType === "text"}
                    onChange={(e) => setDataType(e.target.value as "text" | "file")}
                    className="w-4 h-4 text-primary border-border focus:ring-2 focus:ring-primary"
                  />
                  <span className="text-sm">–û–ø–∏—Å–∞—Ç—å –ø—Ä–æ–µ–∫—Ç —Ç–µ–∫—Å—Ç–æ–º</span>
                </label>
                <label className="flex items-center space-x-3 cursor-pointer">
                  <input
                    type="radio"
                    name="dataType"
                    value="file"
                    checked={dataType === "file"}
                    onChange={(e) => setDataType(e.target.value as "text" | "file")}
                    className="w-4 h-4 text-primary border-border focus:ring-2 focus:ring-primary"
                  />
                  <span className="text-sm">–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏</span>
                </label>
              </div>
            </div>

            {/* –ü–æ–ª–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ç–∏–ø–∞) */}
            {dataType === "text" && (
              <div className="space-y-2">
                <label className="text-sm font-medium">
                  <span className="inline-block">–û–ø–∏—à–∏—Ç–µ –≤–∞—à –ø—Ä–æ–µ–∫—Ç <span className="text-xs text-muted-foreground">(–º–∏–Ω–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤)</span></span>
                  <span className="text-destructive ml-1">*</span>
                </label>
                <Textarea 
                  value={idea} 
                  onChange={(e) => setIdea(e.target.value)} 
                  rows={6} 
                  placeholder="–û–ø–∏—à–∏—Ç–µ –≤–∞—à –ø—Ä–æ–µ–∫—Ç, –ø—Ä–æ–¥—É–∫—Ç –∏–ª–∏ —É—Å–ª—É–≥—É –ø–æ–¥—Ä–æ–±–Ω–æ..." 
                  className="w-full"
                />
                <div className="text-xs text-muted-foreground">
                  {idea.length}/100 —Å–∏–º–≤–æ–ª–æ–≤
                </div>
              </div>
            )}

            {/* –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Ñ–∞–π–ª–æ–≤–æ–≥–æ —Ç–∏–ø–∞) */}
            {dataType === "file" && (
              <div className="space-y-3">
                <label className="text-sm font-medium">–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã —Å –¥–∞–Ω–Ω—ã–º–∏</label>
                <div className="border-2 border-dashed rounded-xl p-6 text-center bg-muted/50">
                  <Input 
                    type="file" 
                    multiple 
                    accept=".txt,.pdf,.doc,.docx,.rtf,.odt,.xls,.xlsx,.csv,.ods,.ppt,.pptx,.jpg,.jpeg,.png,.gif,.bmp,.tiff,.html,.htm,.epub,.mobi,.md"
                    onChange={(e)=> {
                      const newFiles = Array.from(e.target.files||[]);
                      if (files.length + newFiles.length > 5) {
                        toast({
                          type: "warning",
                          title: "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Ñ–∞–π–ª–æ–≤",
                          description: "–ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–∞–∫—Å–∏–º—É–º 5 —Ñ–∞–π–ª–æ–≤"
                        });
                        return;
                      }
                      if (validateFilesForConversion(newFiles)) {
                        setFiles([...files, ...newFiles]);
                      }
                      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º input –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
                      e.target.value = '';
                    }} 
                    className="w-full"
                  />
                  <div className="mt-2 text-xs text-muted-foreground space-y-1">
                    <p>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: PDF, Word, Excel, PowerPoint, TXT, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º, HTML, Markdown</p>
                    <p>–ú–∞–∫—Å–∏–º—É–º 100 –ú–ë –Ω–∞ —Ñ–∞–π–ª, –¥–æ 5 —Ñ–∞–π–ª–æ–≤, –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä –¥–æ 500 –ú–ë</p>
                  </div>
                </div>
                
                {files.length > 0 && (
                  <div className="space-y-2">
                    <div className="flex items-center justify-between">
                      <p className="text-sm font-medium">–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã ({files.length}/5):</p>
                      <Button 
                        variant="ghost" 
                        size="sm" 
                        onClick={() => setFiles([])}
                        className="text-xs"
                      >
                        –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ
                      </Button>
                    </div>
                    <div className="space-y-1">
                      {files.map((file, index) => {
                         const { icon, type } = getFileTypeInfo(file);
                         const formatDescription = getFormatDescription(file);
                         return (
                           <div key={`${file.name}-${index}`} className="flex items-center justify-between gap-2 p-3 bg-background rounded-lg border">
                             <div className="flex items-center gap-3 flex-1">
                               <span className="text-lg">{icon}</span>
                               <div className="flex-1 min-w-0">
                                 <div className="text-sm font-medium truncate" title={file.name}>
                                   {file.name}
                                 </div>
                                 <div className="text-xs text-muted-foreground">
                                   {formatDescription} ‚Ä¢ {formatFileSize(file.size)}
                                 </div>
                               </div>
                             </div>
                            <Button 
                              variant="ghost" 
                              size="sm" 
                              onClick={() => {
                                const newFiles = files.filter((_, i) => i !== index);
                                setFiles(newFiles);
                              }}
                              className="text-xs text-destructive hover:text-destructive"
                            >
                              –£–¥–∞–ª–∏—Ç—å
                            </Button>
                          </div>
                        );
                      })}
                    </div>
                  </div>
                )}
              </div>
            )}


            {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ */}
            <Button 
              onClick={start} 
              variant="default" 
              size="lg"
              className="w-full rounded-xl" 
              disabled={loading}
            >
              –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑
            </Button>
          </div>
        </section>
      )}

      {/* –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è */}
      {currentState === 'loading-recovery' && (
        <section className="space-y-4">
          <div className="flex items-center gap-3 mb-4">
            <Button 
              variant="ghost" 
              size="sm" 
              onClick={() => navigate('/dashboard')}
              className="flex items-center gap-2"
            >
              <ArrowLeft className="h-4 w-4" />
              –ù–∞–∑–∞–¥ –∫ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è–º
            </Button>
          </div>
          
          <header className="flex items-center justify-between gap-2">
            <Input value={title} readOnly className="flex-1 min-w-0" />
            <div className="text-sm text-muted-foreground shrink-0 whitespace-nowrap">{new Date().toLocaleDateString("ru-RU")}</div>
          </header>
          
          <Card className="rounded-2xl">
            <CardContent className="text-center py-8">
              <Loader2 className="h-12 w-12 mx-auto animate-spin text-primary mb-4" />
              <h3 className="font-semibold mb-2">
                –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ...
              </h3>
              <p className="text-muted-foreground">
                –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç
              </p>
            </CardContent>
          </Card>
        </section>
      )}

      {/* –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ */}
      {currentState === 'loading' && (
        <section className="space-y-4">
          <div className="flex items-center gap-3 mb-4">
            <Button 
              variant="ghost" 
              size="sm" 
              onClick={() => navigate('/dashboard')}
              className="flex items-center gap-2"
            >
              <ArrowLeft className="h-4 w-4" />
              –ù–∞–∑–∞–¥ –∫ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è–º
            </Button>
          </div>
          
          <header className="flex items-center justify-between gap-2">
            <Input value={title} readOnly className="flex-1 min-w-0" />
            <div className="text-sm text-muted-foreground shrink-0 whitespace-nowrap">{new Date().toLocaleDateString("ru-RU")}</div>
          </header>
          
          <Card className="rounded-2xl">
            <CardContent className="py-8">
              {isConverting && conversionProgress.length > 0 ? (
                <div className="space-y-4">
                  <div className="text-center">
                    <FileText className="h-12 w-12 mx-auto text-primary mb-4" />
                    <h3 className="font-semibold mb-2">
                      –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã...
                    </h3>
                    <p className="text-muted-foreground mb-6">
                      –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
                    </p>
                  </div>
                  
                  <FileConversionProgress 
                    progress={conversionProgress}
                    onCancel={() => {
                      setLoading(false);
                      setIsConverting(false);
                      setConversionProgress([]);
                    }}
                  />
                </div>
              ) : (
                <div className="text-center">
                  <Loader2 className="h-12 w-12 mx-auto animate-spin text-primary mb-4" />
                  <h3 className="font-semibold mb-2">
                    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ...
                  </h3>
                  <p className="text-muted-foreground">
                    –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç
                  </p>
                </div>
              )}
            </CardContent>
          </Card>
        </section>
      )}

      {/* –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—à–∏–±–∫–∏ */}
      {currentState === 'error' && (
        <section className="space-y-4">
          <div className="flex items-center gap-3 mb-4">
            <Button 
              variant="ghost" 
              size="sm" 
              onClick={() => navigate('/dashboard')}
              className="flex items-center gap-2"
            >
              <ArrowLeft className="h-4 w-4" />
              –ù–∞–∑–∞–¥ –∫ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è–º
            </Button>
          </div>
          
          <header className="flex items-center justify-between gap-2 mb-4">
            <Input 
              value={title} 
              onChange={(e) => {
                setTitle(e.target.value);
                // Auto-save title when changed in error state
                if (currentResearchId && user) {
                  const existingResearchList = JSON.parse(localStorage.getItem('research') || '[]');
                  const updatedResearchList = existingResearchList.map((research: any) => {
                    if (research.id === currentResearchId) {
                      return { ...research, title: e.target.value };
                    }
                    return research;
                  });
                  localStorage.setItem('research', JSON.stringify(updatedResearchList));
                  
                  // Also update in Supabase
                  updateResearch(currentResearchId, { "Project name": e.target.value });
                }
              }}
              disabled={false}
              placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è" 
              className="flex-1 min-w-0" 
            />
            <div className="text-sm text-muted-foreground shrink-0 whitespace-nowrap">{new Date().toLocaleDateString("ru-RU")}</div>
          </header>
          
          <Card className="rounded-2xl border-destructive/50 bg-destructive/5">
            <CardContent className="pt-6">
              <div className="flex items-start gap-4">
                <div className="flex-shrink-0">
                  <AlertCircle className="h-5 w-5 text-destructive" />
                </div>
                <div className="flex-grow space-y-4">
                  <div>
                    <h3 className="font-semibold text-destructive">–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏</h3>
                    <p className="text-sm text-muted-foreground mt-1">
                      –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —É–¥–∞–ª–∏—Ç–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ.
                    </p>
                  </div>
                  <div className="flex gap-3">
                    <Button 
                      onClick={handleRetryAnalysis}
                      disabled={loading}
                      className="rounded-xl"
                    >
                      {loading ? (
                        <>
                          <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                          –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞...
                        </>
                      ) : (
                        "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑"
                      )}
                    </Button>
                    <AlertDialog>
                      <AlertDialogTrigger asChild>
                        <Button 
                          variant="outline" 
                          disabled={loading}
                          className="rounded-xl"
                        >
                          –£–¥–∞–ª–∏—Ç—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
                        </Button>
                      </AlertDialogTrigger>
                      <AlertDialogContent>
                        <AlertDialogHeader>
                          <AlertDialogTitle>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ</AlertDialogTitle>
                          <AlertDialogDescription>
                            –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.
                          </AlertDialogDescription>
                        </AlertDialogHeader>
                        <AlertDialogFooter>
                          <AlertDialogCancel>–û—Ç–º–µ–Ω–∞</AlertDialogCancel>
                          <AlertDialogAction 
                            onClick={handleDeleteResearch}
                            className="bg-destructive text-destructive-foreground hover:bg-destructive/90"
                          >
                            –£–¥–∞–ª–∏—Ç—å
                          </AlertDialogAction>
                        </AlertDialogFooter>
                      </AlertDialogContent>
                    </AlertDialog>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </section>
      )}
    </main>
  );
}
