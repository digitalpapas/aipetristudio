import { useEffect, useState, useCallback, useMemo } from "react";
import { useParams, useNavigate } from "react-router-dom";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Input } from "@/components/ui/input";
import { ArrowLeft, Loader2, Trash2, RefreshCw, Lock, Eye, ArrowRight, X, Star } from "lucide-react";
import SegmentCards from "@/components/dashboard/SegmentCards";
import { useCustomToast } from "@/hooks/use-custom-toast";
import { useAuth } from "@/contexts/AuthContext";
import { deleteResearch, updateResearch, getResearch, getSegments } from "@/lib/supabase-utils";
import { supabase } from "@/integrations/supabase/client";
import { debounce } from "lodash";
import { Skeleton } from "@/components/ui/skeleton";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";

export default function ResearchResultPage() {
  const { id } = useParams();
  const navigate = useNavigate();
  const { toast } = useCustomToast();
  const { user } = useAuth();
  
  // –£–º–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø–æ–∏—Å–∫–æ–º –ø–æ —Ä–∞–∑–Ω—ã–º —Ç–∏–ø–∞–º ID
  const [research, setResearch] = useState<any>(() => {
    if (!id) return null;
    
    const allResearch = JSON.parse(localStorage.getItem('research') || '[]');
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø–æ —Ç–æ—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é ID
    let foundResearch = allResearch.find((r: any) => r.id === id);
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ ID, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ Project ID (–º–æ–∂–µ—Ç –±—ã—Ç—å timestamp)
    if (!foundResearch) {
      foundResearch = allResearch.find((r: any) => r["Project ID"] === id);
    }
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ Project ID, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ø—Ä–æ–µ–∫—Ç–∞ "–ú–∞—Ä–º–µ–ª–∞–¥—É—Å"
    if (!foundResearch && id === "1755497814752") {
      foundResearch = allResearch.find((r: any) => 
        r["Project name"]?.toLowerCase().includes("–º–∞—Ä–º–µ–ª–∞–¥—É—Å") ||
        r.title?.toLowerCase().includes("–º–∞—Ä–º–µ–ª–∞–¥—É—Å")
      );
    }
    
    // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ, —Å–æ–∑–¥–∞–µ–º fallback –æ–±—ä–µ–∫—Ç —Å –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if (foundResearch) {
      return {
        ...foundResearch,
        // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –Ω–∞–ª–∏—á–∏–µ –±–∞–∑–æ–≤—ã—Ö –ø–æ–ª–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        title: foundResearch.title || foundResearch["Project name"] || "–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ",
        "Project name": foundResearch["Project name"] || foundResearch.title || "–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ",
        status: foundResearch.status || "completed"
      };
    }
    
    // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ localStorage, —Å–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    // —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —ç–∫—Ä–∞–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Supabase
    return {
      id: id,
      title: "–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...",
      "Project name": "–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...",
      status: "completed" // –¥–ª—è –ø–æ–∫–∞–∑–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    };
  });
  
  const [localTitle, setLocalTitle] = useState(research?.["Project name"] || research?.title || "");
  const [isInitialLoad, setIsInitialLoad] = useState(true);
  
  
  
  const [segments, setSegments] = useState<any[]>(() => {
    if (!id) return [];
    const savedSegments = localStorage.getItem(`research-${id}-segments`);
    return savedSegments ? JSON.parse(savedSegments) : [];
  });
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤ (20 —à—Ç—É–∫)
  const [allGeneratedSegments, setAllGeneratedSegments] = useState<any[]>(() => {
    if (!id) return [];
    const savedAllSegments = localStorage.getItem(`research-${id}-all-segments`);
    return savedAllSegments ? JSON.parse(savedAllSegments) : [];
  });
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ç–æ–ø —Å–µ–≥–º–µ–Ω—Ç–æ–≤ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫
  const [topSegmentsData, setTopSegmentsData] = useState<any[]>(() => {
    if (!id) return [];
    const savedTopSegments = localStorage.getItem(`research-${id}-top-segments`);
    return savedTopSegments ? JSON.parse(savedTopSegments) : [];
  });
  const [dataLoaded, setDataLoaded] = useState(false);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);
  const [segmentToDelete, setSegmentToDelete] = useState<number | null>(null);

  const [isRetrying, setIsRetrying] = useState(false);
  // Removed isLoading state - show interface immediately like ResearchSegmentPage
  
  // Load data from Supabase in background without affecting instant UI display
  useEffect(() => {
    const loadDataFromSupabase = async () => {
      if (!id || !user?.id) return;
      
      try {
        // Load research data from Supabase
        const { data } = await getResearch(id);
        
        if (data) {
          // Create updated research object with compatible fields
          const updatedResearch = {
            ...data,
            title: data["Project name"], // For localStorage compatibility
            createdAt: data.created_at   // For localStorage compatibility
          };
          
          // Always update with fresh data from Supabase
          setResearch(updatedResearch);
          
          // Update localTitle with the data from Supabase
          setLocalTitle(data["Project name"]);
          setIsInitialLoad(false);
          
          // Update page title
          document.title = `${data["Project name"]} | –†–µ–∑—É–ª—å—Ç–∞—Ç—ã`;
          
          // Update localStorage with Supabase data
          const allResearch = JSON.parse(localStorage.getItem('research') || '[]');
          const updated = allResearch.map((r: any) => 
            r.id === id ? updatedResearch : r
          );
          
          // Add record if not in localStorage
          if (!allResearch.find((r: any) => r.id === id)) {
            updated.push(updatedResearch);
          }
          localStorage.setItem('research', JSON.stringify(updated));
          
          // Handle status-based navigation
          const researchStatus = data.status || 'completed';
          
          if (researchStatus === "awaiting_selection") {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã
            const { data: segmentsData } = await getSegments(id);
            
            // –ï—Å–ª–∏ —Å–µ–≥–º–µ–Ω—Ç—ã —É–∂–µ –≤—ã–±—Ä–∞–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, –ù–ï –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º
            if (segmentsData && segmentsData.length > 0) {
              // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
              console.log('–°–µ–≥–º–µ–Ω—Ç—ã —É–∂–µ –≤—ã–±—Ä–∞–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã');
            } else {
              // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ—Ç - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≤—ã–±–æ—Ä
              navigate(`/dashboard/research/new?id=${id}`);
              return;
            }
          } else if (researchStatus === "error") {
            const { data: segmentsData } = await getSegments(id);
            if (!segmentsData || segmentsData.length === 0) {
              navigate(`/dashboard/research/new?id=${id}`);
              return;
            }
          } else if (researchStatus === "generating" || researchStatus === "processing") {
            navigate(`/dashboard/research/new?id=${id}`);
            return;
          }
          
          // Load SELECTED segments from Supabase (for "–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã" tab)
          const { data: allSegmentsFromDB } = await getSegments(id);
          if (allSegmentsFromDB && allSegmentsFromDB.length > 0) {
            // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ "–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã"
            const selectedSegments = allSegmentsFromDB.filter((segment: any) => segment.is_selected);
            const formattedSegments = selectedSegments.map((segment: any) => ({
              id: segment["–°–µ–≥–º–µ–Ω—Ç ID"],
              title: segment["–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç–∞"],
              description: segment.description,
              problems: segment.problems,
              message: segment.message
            }));
            setSegments(formattedSegments);
            
            // Sync segments with localStorage
            localStorage.setItem(`research-${id}-segments`, JSON.stringify(formattedSegments));
          }
          
          // Load all generated segments directly from segments table (–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º)
          console.log('üîç Loading all segments directly from segments table for research:', id);
          
          
          const { data: allSegmentsData, error: allSegmentsError } = await supabase
            .from('segments')
            .select('*')
            .eq('Project ID', id)
            .order('–°–µ–≥–º–µ–Ω—Ç ID');

          if (allSegmentsError) {
            console.error('Error loading all segments:', allSegmentsError);
          } else if (allSegmentsData && allSegmentsData.length > 0) {
            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ—á–Ω–æ –∫–∞–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤—ã–±–æ—Ä–∞ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
            const formattedAllSegments = allSegmentsData.map((segment: any) => ({
              id: segment["–°–µ–≥–º–µ–Ω—Ç ID"],
              title: segment["–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç–∞"],
              description: segment.description,
              problems: segment.problems,
              message: segment.message
            }));
            
            console.log('‚úÖ Successfully loaded all segments from database:', formattedAllSegments.length);
            console.log('üìã Sample segment:', formattedAllSegments[0]);
            setAllGeneratedSegments(formattedAllSegments);
            localStorage.setItem(`research-${id}-all-segments`, JSON.stringify(formattedAllSegments));
          } else {
            console.log('‚ö†Ô∏è No segments found in database, using selected segments as fallback');
            // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ –ë–î –≤–æ–æ–±—â–µ –Ω–µ—Ç —Å–µ–≥–º–µ–Ω—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞–∫ fallback
            if (allSegmentsFromDB && allSegmentsFromDB.length > 0) {
              const fallbackSegments = allSegmentsFromDB.map((segment: any) => ({
                id: segment["–°–µ–≥–º–µ–Ω—Ç ID"],
                title: segment["–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç–∞"],
                description: segment.description,
                problems: segment.problems,
                message: segment.message
              }));
              setAllGeneratedSegments(fallbackSegments);
            }
          }
          
          // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ø —Å–µ–≥–º–µ–Ω—Ç—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã top_segments
          const { data: topSegments } = await supabase
            .from('top_segments')
            .select('*')
            .eq('project_id', id)
            .order('rank');
            
          if (topSegments && topSegments.length > 0) {
            setTopSegmentsData(topSegments);
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ø —Å–µ–≥–º–µ–Ω—Ç—ã –≤ localStorage –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            localStorage.setItem(`research-${id}-top-segments`, JSON.stringify(topSegments));
          }
          
          setDataLoaded(true);
        }
      } catch (error) {
        console.error('Error loading data from Supabase:', error);
        setIsInitialLoad(false);
      }
    };

    loadDataFromSupabase();
  }, [id, user?.id, navigate]);

  // –°–æ–∑–¥–∞–µ–º debounced —Ñ—É–Ω–∫—Ü–∏—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  const debouncedSave = useCallback(
    debounce(async (newName: string) => {
      if (!research || !user?.id || !id) return;
      
      try {
        const { error } = await updateResearch(id, { "Project name": newName });
        
        if (!error) {
          // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
          const updatedResearch = { ...research, "Project name": newName, title: newName };
          setResearch(updatedResearch);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º localStorage
          const allResearch = JSON.parse(localStorage.getItem('research') || '[]');
          const updated = allResearch.map((r: any) => 
            r.id === id ? updatedResearch : r
          );
          localStorage.setItem('research', JSON.stringify(updated));
          
          toast({ 
            type: "success",
            title: "–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ",
            description: "–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
          });
        } else {
          toast({
            type: "error",
            title: "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
            description: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
          });
        }
      } catch (error) {
        console.error('Error updating research name:', error);
      }
    }, 1000), // –ó–∞–¥–µ—Ä–∂–∫–∞ 1 —Å–µ–∫—É–Ω–¥–∞
    [research, user?.id, id]
  );

  // –û–±–Ω–æ–≤–ª—è–µ–º useEffect –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ localTitle
  useEffect(() => {
    setLocalTitle(research?.["Project name"] || research?.title || "");
  }, [research]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è
  const handleNameChange = (newName: string) => {
    setLocalTitle(newName);
    debouncedSave(newName);
  };

  const handleDeleteResearch = async () => {
    if (!user?.id || !id) return;

    try {
      // –£–¥–∞–ª—è–µ–º –∏–∑ Supabase
      const { error } = await deleteResearch(id);
      
      if (error) {
        console.error('Error deleting research from Supabase:', error);
        toast({
          type: "error",
          title: "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è",
          description: "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
        });
        return;
      }

      // –£–¥–∞–ª—è–µ–º –∏–∑ localStorage
      const allKeys = Object.keys(localStorage);
      const keysToRemove = allKeys.filter(key => 
        key === 'research' ||
        key.includes(id) ||
        key.includes(`research-${id}`) ||
        key.includes(`selectedSegments_${id}`) ||
        key.includes(`analysis_${id}_`) ||
        key.includes(`segment-analysis-${id}-`)
      );
      
      keysToRemove.forEach(key => localStorage.removeItem(key));
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –º–∞—Å—Å–∏–≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –≤ localStorage
      const currentResearch = JSON.parse(localStorage.getItem('research') || '[]');
      const updatedResearch = currentResearch.filter((r: any) => r.id !== id);
      localStorage.setItem('research', JSON.stringify(updatedResearch));
      
      toast({ 
        type: "delete",
        title: "–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ",
        description: "–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã"
      });
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
      navigate('/dashboard');
    } catch (error) {
      console.error('Error deleting research:', error);
      toast({
        type: "error",
        title: "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è",
        description: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"
      });
    }
  };

  const handleExport = () => {
    toast({ 
      type: "info",
      title: "–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
      description: "–§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞"
    });
  };

  const handleShare = () => {
    toast({ 
      type: "info",
      title: "–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
      description: "–§—É–Ω–∫—Ü–∏—è –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞"
    });
  };

  const handleDuplicate = () => {
    toast({ 
      type: "info",
      title: "–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
      description: "–§—É–Ω–∫—Ü–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞"
    });
  };

  const handleRetryAnalysis = async () => {
    if (!research || !user?.id) return;

    setIsRetrying(true);
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Supabase –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      const { data: supabaseResearch, error: fetchError } = await getResearch(id!);
      
      if (fetchError) {
        console.error('Error fetching research from Supabase:', fetchError);
        toast({
          type: "error",
          title: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö",
          description: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"
        });
        setIsRetrying(false);
        return;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "processing" –≤ Supabase –∏ localStorage
      const { error: updateError } = await updateResearch(id!, { description: `${supabaseResearch?.description || research.description} - Retry attempt` });
      
      if (updateError) {
        console.error('Error updating research status:', updateError);
      }
      
      const allResearch = JSON.parse(localStorage.getItem('research') || '[]');
      const updatedResearch = allResearch.map((r: any) => 
        r.id === id ? { ...r, status: "processing" } : r
      );
      localStorage.setItem('research', JSON.stringify(updatedResearch));
      
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑ Supabase (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
      const webhookData = {
        user_id: user.id,
        research_id: id,
        analysis_type: "research_retry",
        status: 'pending',
        userEmail: user.email,
        projectName: supabaseResearch?.["Project name"] || research.title,
        type: research.type || "idea",
        content: supabaseResearch?.description || research.description,
        isRetry: true,
        timestamp: new Date().toISOString()
      };

      console.log('–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ webhook:', webhookData);
      
      const response = await fetch(
        "https://hedayupokost.beget.app/webhook-test/bc559004-5763-43e5-ab65-60e83cdedcf9",
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(webhookData),
        }
      );

      if (response.ok) {
        const result = await response.text(); // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–ø—Ä—è–º—É—é
        console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏:', result);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        await updateResearch(id!, { description: `${supabaseResearch?.description || research.description} - Retry successful` });
        
        const updatedResearchSuccess = allResearch.map((r: any) => 
          r.id === id 
            ? { ...r, status: "completed", generatedSegments: { result: result } }
            : r
        );
        localStorage.setItem('research', JSON.stringify(updatedResearchSuccess));
        
        toast({
          title: "–£—Å–ø–µ—à–Ω–æ",
          description: "–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ!"
        });
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        window.location.reload();
      } else {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ:", error);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∏
      const allResearch = JSON.parse(localStorage.getItem('research') || '[]');
      const updatedResearch = allResearch.map((r: any) => 
        r.id === id ? { ...r, status: "error" } : r
      );
      localStorage.setItem('research', JSON.stringify(updatedResearch));
      
      toast({
        type: "error",
        title: "–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏",
        description: "–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ."
      });
    } finally {
      setIsRetrying(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å–µ–≥–º–µ–Ω—Ç–∞
  const confirmRemoveFromSelected = async () => {
    if (segmentToDelete === null) return;
    
    await handleRemoveFromSelected(segmentToDelete);
    setDeleteDialogOpen(false);
    setSegmentToDelete(null);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–µ–≥–º–µ–Ω—Ç–∞ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
  const handleRemoveFromSelected = async (segmentId: number) => {
    if (!user?.id || !id) return;
    
    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥ is_selected –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const { error } = await supabase
        .from('segments')
        .update({ is_selected: false })
        .eq('Project ID', id)
        .eq('–°–µ–≥–º–µ–Ω—Ç ID', segmentId);
        
      if (error) {
        toast({
          type: "error",
          title: "–û—à–∏–±–∫–∞",
          description: "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–µ–≥–º–µ–Ω—Ç"
        });
        return;
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - —É–±–∏—Ä–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –°–†–ê–ó–£
      const updatedSegments = segments.filter(s => s.id !== segmentId);
      setSegments(updatedSegments);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º localStorage
      localStorage.setItem(`research-${id}-segments`, JSON.stringify(updatedSegments));
      
      toast({
        type: "success",
        title: "–°–µ–≥–º–µ–Ω—Ç —É–¥–∞–ª–µ–Ω",
        description: "–°–µ–≥–º–µ–Ω—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö"
      });
      
    } catch (error) {
      console.error('Error removing segment:', error);
      toast({
        type: "error",
        title: "–û—à–∏–±–∫–∞", 
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–µ–≥–º–µ–Ω—Ç"
      });
    }
  };

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∑–∞–≥–ª—É—à–∫—É –ø–æ–∫–∞ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å –∏–∑ Supabase
  if (!research) {
    return (
      <main className="space-y-5">
        <div className="flex items-center gap-3 mb-4">
          <Button 
            variant="ghost" 
            size="sm" 
            onClick={() => navigate('/dashboard')}
            className="flex items-center gap-2"
          >
            <ArrowLeft className="h-4 w-4" />
            –ù–∞–∑–∞–¥ –∫ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è–º
          </Button>
        </div>
        
        <div className="space-y-3">
          <Skeleton className="h-10 w-80" />
          <div className="flex items-center gap-3">
            <Skeleton className="h-4 w-24" />
          </div>
        </div>
        
        <Card className="rounded-2xl">
          <CardContent className="text-center py-8">
            <Loader2 className="h-12 w-12 mx-auto animate-spin text-primary mb-4" />
            <h3 className="font-semibold mb-2">–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...</h3>
            <p className="text-muted-foreground">
              –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏
            </p>
          </CardContent>
        </Card>
      </main>
    );
  }

  // –ï—Å–ª–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
  if (research?.status === "processing" || research?.status === "generating") {
    return (
      <main className="space-y-5">
        <div className="flex items-center gap-3 mb-4">
          <Button 
            variant="ghost" 
            size="sm" 
            onClick={() => navigate('/dashboard')}
            className="flex items-center gap-2"
          >
            <ArrowLeft className="h-4 w-4" />
            –ù–∞–∑–∞–¥ –∫ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è–º
          </Button>
        </div>
        
        <header className="flex items-center gap-3">
          <div className="relative max-w-md">
            <Input 
              value={localTitle} 
              onChange={(e) => handleNameChange(e.target.value)}
              disabled={research?.status === "processing" || research?.status === "generating"}
              className={`${research?.status === "processing" || research?.status === "generating" ? "bg-muted text-muted-foreground cursor-not-allowed pr-10" : ""}`}
              title={research?.status === "processing" || research?.status === "generating" ? "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –≤–æ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ–≥–º–µ–Ω—Ç–æ–≤" : ""}
            />
            {(research?.status === "processing" || research?.status === "generating") && (
              <Lock className="absolute right-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
            )}
          </div>
          <div className="text-sm text-muted-foreground">{research?.createdAt ? new Date(research.createdAt).toLocaleDateString("ru-RU") : ""}</div>
        </header>

        <Card className="rounded-2xl">
          <CardContent className="text-center py-8">
            <Loader2 className="h-12 w-12 mx-auto animate-spin text-primary mb-4" />
            <h3 className="font-semibold mb-2">–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã...</h3>
            <p className="text-muted-foreground">
              –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ–∑–¥–∞–µ–º —Ü–µ–ª–µ–≤—ã–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏
            </p>
          </CardContent>
        </Card>
      </main>
    );
  }

  // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
  if (research?.status === "error") {
    return (
      <main className="space-y-5">
        <div className="flex items-center gap-3 mb-4">
          <Button 
            variant="ghost" 
            size="sm" 
            onClick={() => navigate('/dashboard')}
            className="flex items-center gap-2"
          >
            <ArrowLeft className="h-4 w-4" />
            –ù–∞–∑–∞–¥ –∫ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è–º
          </Button>
        </div>
        
        <header className="flex items-center gap-3">
          <Input 
            value={localTitle} 
            onChange={(e) => handleNameChange(e.target.value)}
            className="max-w-md"
          />
          <div className="text-sm text-muted-foreground whitespace-nowrap">
            {(() => {
              const date = research?.created_at || research?.createdAt;
              return date ? new Date(date).toLocaleDateString("ru-RU") : "";
            })()}
          </div>
        </header>

        <Card className="rounded-2xl border-destructive">
          <CardContent className="text-center py-8">
            <div className="h-12 w-12 mx-auto bg-destructive/10 rounded-full flex items-center justify-center mb-4">
              <span className="text-destructive">‚ö†</span>
            </div>
            <h3 className="font-semibold mb-2">–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏</h3>
            <p className="text-muted-foreground mb-6">
              –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ–≥–º–µ–Ω—Ç–æ–≤. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ.
            </p>
            
            <div className="flex gap-3 justify-center">
              <Button 
                variant="outline" 
                onClick={handleRetryAnalysis}
                disabled={isRetrying}
                className="flex items-center gap-2"
              >
                {isRetrying ? (
                  <Loader2 className="h-4 w-4 animate-spin" />
                ) : (
                  <RefreshCw className="h-4 w-4" />
                )}
                {isRetrying ? "–ü–æ–≤—Ç–æ—Ä—è–µ–º..." : "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑"}
              </Button>
              
              <Button 
                variant="destructive" 
                onClick={handleDeleteResearch}
                className="flex items-center gap-2"
              >
                <Trash2 className="h-4 w-4" />
                –£–¥–∞–ª–∏—Ç—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
              </Button>
            </div>
          </CardContent>
        </Card>
      </main>
    );
  }

  // –ï—Å–ª–∏ —Å–µ–≥–º–µ–Ω—Ç—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã, –Ω–æ –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã
  if (research?.status === "awaiting_selection" && segments.length === 0) {
      return (
        <main className="space-y-5">
          <div className="flex items-center gap-3 mb-4">
            <Button 
              variant="ghost" 
              size="sm" 
              onClick={() => navigate('/dashboard')}
              className="flex items-center gap-2"
            >
              <ArrowLeft className="h-4 w-4" />
              –ù–∞–∑–∞–¥ –∫ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è–º
            </Button>
          </div>
          
          <header className="flex items-center gap-3">
            <Input 
              value={localTitle}
              onChange={(e) => handleNameChange(e.target.value)}
              className="max-w-md" 
            />
            <div className="text-sm text-muted-foreground whitespace-nowrap">
              {(() => {
                const date = research?.created_at || research?.createdAt;
                return date ? new Date(date).toLocaleDateString("ru-RU") : "";
              })()}
            </div>
          </header>

          <SegmentCards 
            segments={segments || []} // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã segments
            researchTitle={research?.["Project name"] || research?.title || ""}
            researchId={id} // –ü–µ—Ä–µ–¥–∞–µ–º ID –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–ø-—Å–µ–≥–º–µ–Ω—Ç–æ–≤
            onSelectedSegmentsChange={(selectedIds) => {
              console.log('–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã:', selectedIds);
              // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø–∏—Å–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
              const allResearch = JSON.parse(localStorage.getItem('research') || '[]');
              const updated = allResearch.map((r: any) => 
                r.id === id ? { ...r, segmentsCount: selectedIds.length } : r
              );
              localStorage.setItem('research', JSON.stringify(updated));
            }}
          />
        </main>
      );
    }

  return (
    <main className="flex flex-col min-h-full">
      <div className="flex items-center gap-3 mb-4">
        <Button 
          variant="ghost" 
          size="sm" 
          onClick={() => navigate('/dashboard')}
          className="flex items-center gap-2"
        >
          <ArrowLeft className="h-4 w-4" />
          –ù–∞–∑–∞–¥ –∫ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è–º
        </Button>
      </div>
      
      <header className="flex flex-col sm:flex-row sm:items-center justify-between gap-4 mb-5">
        <div className="flex flex-col sm:flex-row sm:items-center gap-2 sm:gap-4">
          <Input 
            value={localTitle} 
            onChange={(e) => handleNameChange(e.target.value)}
            className="max-w-md"
          />
          <div className="text-xs sm:text-sm text-muted-foreground whitespace-nowrap">
            {(() => {
              const date = research?.created_at || research?.createdAt;
              return date ? new Date(date).toLocaleDateString("ru-RU") : "";
            })()}
          </div>
        </div>
        
        <div className="flex gap-2">
          <Button 
            variant="outline" 
            size="sm"
            className="flex-1 sm:flex-initial text-xs sm:text-sm"
            onClick={handleExport}
          >
            <span className="hidden sm:inline">–≠–∫—Å–ø–æ—Ä—Ç</span>
            <span className="sm:hidden">üì§</span>
          </Button>
          <Button 
            variant="outline" 
            size="sm"
            className="flex-1 sm:flex-initial text-xs sm:text-sm"
            onClick={handleShare}
          >
            <span className="hidden sm:inline">–ü–æ–¥–µ–ª–∏—Ç—å—Å—è</span>
            <span className="sm:hidden">üîó</span>
          </Button>
          <Button 
            variant="outline" 
            size="sm"
            className="flex-1 sm:flex-initial text-xs sm:text-sm"
            onClick={handleDuplicate}
          >
            <span className="hidden sm:inline">–î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å</span>
            <span className="sm:hidden">üìã</span>
          </Button>
        </div>
      </header>

        <div>
          <Tabs defaultValue="all-segments" className="w-full">
          <TabsList className="mb-4">
            <TabsTrigger value="all-segments">–°–µ–≥–º–µ–Ω—Ç—ã</TabsTrigger>
            <TabsTrigger value="selected-segments">–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã</TabsTrigger>
          </TabsList>

          <TabsContent value="all-segments" className="space-y-4">
            {/* –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—Å–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã (20 —à—Ç—É–∫) —Å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º —Ç–æ–ø-3 */}
            {allGeneratedSegments && allGeneratedSegments.length > 0 ? (
              <SegmentCards 
                segments={allGeneratedSegments}
                topSegments={topSegmentsData} // –ü–µ—Ä–µ–¥–∞–µ–º —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ç–æ–ø —Å–µ–≥–º–µ–Ω—Ç—ã –∫–∞–∫ TopSegmentData[]
                selectedSegments={useMemo(() => segments.map(s => s.id), [segments])} // –ò—Å–ø–æ–ª—å–∑—É–µ–º useMemo –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Å—Å–∏–≤–∞
                researchTitle={localTitle}
                researchId={id}
                hideTopRecommendations={true} // –°–∫—Ä—ã–≤–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –±–ª–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ò–ò
                originalData={{
                  projectName: localTitle,
                  description: research?.description || '',
                  userId: user?.id || '',
                  projectId: id || ''
                }}
                
                onSelectedSegmentsChange={(selectedIds) => {
                  console.log('–ù–æ–≤—ã–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã:', selectedIds);
                  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
                  const newSelectedSegments = allGeneratedSegments.filter(seg => selectedIds.includes(seg.id));
                  setSegments(newSelectedSegments);
                  localStorage.setItem(`research-${id}-segments`, JSON.stringify(newSelectedSegments));
                }}
              />
            ) : (
              <Card>
                <CardContent className="pt-6 text-center">
                  <div className="text-muted-foreground mb-4">
                    –í—Å–µ —Å–µ–≥–º–µ–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è...
                  </div>
                  <div className="text-xs text-muted-foreground">
                    Debug: allSegments={allGeneratedSegments?.length || 0}, status={research?.status}
                  </div>
                </CardContent>
              </Card>
            )}
          </TabsContent>

          <TabsContent value="selected-segments" className="mt-4">
            {/* –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã */}
            <div className="grid gap-4 sm:grid-cols-2 lg:grid-cols-3">
              {segments.length > 0 ? (
                segments.map((segment) => (
                  <Card 
                    key={segment.id} 
                    className="group relative transition-all duration-300 hover:shadow-md rounded-xl cursor-pointer hover:border-primary/50"
                    onClick={() => navigate(`/dashboard/research/${id}/segment/${segment.id}`)}
                  >
                    <CardHeader className="relative pb-0 px-2 pt-2 sm:px-3 sm:pt-3">
                      <div className="flex items-center justify-between mb-1">
                        <span className="text-xs font-medium text-muted-foreground">
                          –°–µ–≥–º–µ–Ω—Ç {segment.id}
                        </span>
                        <div className="flex items-center gap-2">
                          <Eye className="h-4 w-4 text-muted-foreground group-hover:text-primary transition-colors" />
                          <Button
                            size="icon"
                            variant="outline"
                            className="h-6 w-6 rounded-full hover:bg-destructive hover:text-destructive-foreground"
                            onClick={(e) => {
                              e.stopPropagation();
                              setSegmentToDelete(segment.id);
                              setDeleteDialogOpen(true);
                            }}
                          >
                            <X className="h-3 w-3" />
                          </Button>
                        </div>
                      </div>
                      <h3 className="text-sm font-bold line-clamp-2 break-words truncate mb-2">
                        {segment.title}
                      </h3>
                    </CardHeader>
                    <CardContent className="relative px-2 pb-2 pt-1 sm:px-3 sm:pb-3">
                      <p className="text-xs text-muted-foreground leading-relaxed line-clamp-3 break-words overflow-hidden text-ellipsis">
                        {segment.description}
                      </p>
                      <div className="mt-2 flex items-center gap-1 text-xs text-primary font-medium">
                        <span>–ü–µ—Ä–µ–π—Ç–∏ –∫ –∞–Ω–∞–ª–∏–∑—É</span>
                        <ArrowRight className="h-3 w-3" />
                      </div>
                    </CardContent>
                  </Card>
                ))
              ) : (
                <Card className="col-span-full">
                  <CardContent className="pt-6 text-center">
                    <div className="text-muted-foreground mb-4">
                      –°–µ–≥–º–µ–Ω—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã.
                    </div>
                    <Button 
                      variant="outline"
                      onClick={() => {
                        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ø–µ—Ä–≤—É—é –≤–∫–ª–∞–¥–∫—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
                        const allSegmentsTab = document.querySelector('[value="all-segments"]') as HTMLElement;
                        allSegmentsTab?.click();
                      }}
                    >
                      –í—ã–±—Ä–∞—Ç—å —Å–µ–≥–º–µ–Ω—Ç—ã
                    </Button>
                  </CardContent>
                </Card>
               )}
            </div>
          </TabsContent>
        </Tabs>
      </div>

      {/* –î–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è */}
      <AlertDialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ</AlertDialogTitle>
            <AlertDialogDescription>
              –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Å–µ–≥–º–µ–Ω—Ç –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö? 
              –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —Ç–∞–∫–∂–µ —É–¥–∞–ª–∏—Ç –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Å–µ–≥–º–µ–Ω—Ç–æ–º –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
              –î–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel onClick={() => {
              setDeleteDialogOpen(false);
              setSegmentToDelete(null);
            }}>
              –û—Ç–º–µ–Ω–∞
            </AlertDialogCancel>
            <AlertDialogAction 
              onClick={confirmRemoveFromSelected}
              className="bg-destructive text-destructive-foreground hover:bg-destructive/90"
            >
              –£–¥–∞–ª–∏—Ç—å
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </main>
  );
}
